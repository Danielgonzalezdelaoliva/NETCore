<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mecalux.Core</name>
    </assembly>
    <members>
        <member name="T:Mecalux.Core.Adapter.Extensions.TypeAdapterExtension">
            <summary>
            Metodos de extension para adaptadores
            </summary>
        </member>
        <member name="M:Mecalux.Core.Adapter.Extensions.TypeAdapterExtension.ProjectedAs``2(Mecalux.Core.Domain.Entities.IEntity{``1})">
            <summary>
             Adaptar un objeto de origen a una instancia de tipo <paramreftypeparamref name="TProjection"/>
            </summary>
            <typeparam name="TProjection">Tipo de elemento de destino</typeparam>
            <typeparam name="TPrimaryKey">Identificador único.</typeparam>
            <param name="source">Instancia para adaptarse</param>
            <returns><paramref name="source"/> asignada a <typeparamref name="TProjection"/></returns>
        </member>
        <member name="M:Mecalux.Core.Adapter.Extensions.TypeAdapterExtension.ProjectedAs``1(System.Object)">
            <summary>
            Adaptar un objeto de origen a una instancia de tipo <paramreftypeparamref name="TProjection"/>
            </summary>
            <typeparam name="TProjection">Tipo de elemento de destino</typeparam>
            <param name="source">Instancia para adaptarse</param>
            <returns><paramref name="source"/> asignada a <typeparamref name="TProjection"/></returns>
        </member>
        <member name="M:Mecalux.Core.Adapter.Extensions.TypeAdapterExtension.ProjectedAsCollection``2(System.Collections.Generic.IEnumerable{Mecalux.Core.Domain.Entities.IEntity{``1}})">
            <summary>
            Adaptar un objeto de origen a una instancia de tipo <paramreftypeparamref name="TProjection"/>
            </summary>
            <typeparam name="TProjection">Tipo de elemento de destino</typeparam>
            <typeparam name="TPrimaryKey">Identificador único.</typeparam>
            <param name="source">Instancia para adaptarse</param>
            <returns><paramref name="source"/> asignada a <typeparamref name="TProjection"/></returns>
        </member>
        <member name="M:Mecalux.Core.Adapter.Extensions.TypeAdapterExtension.ProjectedAsCollection``1(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Adaptar un objeto de origen a una instancia de tipo <paramreftypeparamref name="TProjection"/>
            </summary>
            <typeparam name="TProjection">Tipo de elemento de destino</typeparam>
            <param name="source">Instancia para adaptarse</param>
            <returns><paramref name="source"/> asignada a <typeparamref name="TProjection"/></returns>
        </member>
        <member name="T:Mecalux.Core.Adapter.ITypeAdapter">
            <summary>
            Contrato base para mapear de  dto-->aggregate o aggregate-->dto.
            <remarks>
            Esto contrato se debe utilizar para trabajar con  ( automapper,emitmapper,valueinjecter...)
            </remarks>
            </summary>
        </member>
        <member name="M:Mecalux.Core.Adapter.ITypeAdapter.Adapt``2(``0)">
            <summary>
            Adaptar un objeto de origen a una instancia de tipo <typeparamref name="TTarget"/>
            </summary>
            <typeparam name="TSource">Tipo de elemento de origen</typeparam>
            <typeparam name="TTarget">Tipo de elemento de destino</typeparam>
            <param name="source">Instancia para adaptarse</param>
            <returns><paramref name="source"/> asignada a <typeparamref name="TTarget"/></returns>
        </member>
        <member name="M:Mecalux.Core.Adapter.ITypeAdapter.Adapt``1(System.Object)">
            <summary>
            Adaptar un objeto de origen a una instancia de tipo <typeparamref name="TTarget"/>
            </summary>
            <typeparam name="TTarget">Tipo de elemento de destino</typeparam>
            <param name="source">Instancia para adaptarse</param>
            <returns><paramref name="source"/> asignada a <typeparamref name="TTarget"/></returns>
        </member>
        <member name="M:Mecalux.Core.Adapter.ITypeAdapter.LoadProfiles(System.String)">
            <summary>
            Carga de perfiles
            </summary>
            <param name="assemblyName">assembly donde se encuentran los perfiles</param>
        </member>
        <member name="M:Mecalux.Core.Adapter.ITypeAdapter.LoadProfiles(System.String[])">
            <summary>
            assembly donde se encuentran los perfiles
            </summary>
            <param name="assemblyNames">assemblies donde se encuentran los perfiles</param>
        </member>
        <member name="P:Mecalux.Core.Application.Constraints.IUniques`2.LogicOperator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mecalux.Core.Application.Constraints.IUniques`2.CreateUnique(Mecalux.Core.Application.IDto{`1})">
            <summary>
            
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.Core.Application.Constraints.IUniques`2.Init(Mecalux.Core.Application.IDto{`1})">
            <summary>
            
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.Core.Application.Constraints.Constraints`2.ValidObjects(System.Collections.Generic.List{`0},System.Collections.Generic.IDictionary{System.String,System.Object}@)">
            <summary>
            Indica si la lista contiene elementos validos
            </summary>
            <param name="list">Lista por comprobar</param>
            <param name="errors">Lista de los elementos invalidos</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.Core.Application.Extensions.ExpressionExtensionMethods">
            <summary>
            Métodos de extensión para generar los filtros
            </summary>
        </member>
        <member name="M:Mecalux.Core.Application.Extensions.ExpressionExtensionMethods.GetFilterExpression(System.Linq.Expressions.MemberExpression,System.Linq.Expressions.ConstantExpression,Mecalux.Core.Application.Criterias.Filter)">
            <summary>
            Construcción de la expresión para realizar la comparación  
            </summary>
            <param name="leftExpression">Expresión izquierda</param>
            <param name="rightExpression">Expresión derecha</param>
            <param name="filter">Filtro</param>
            <returns>Expresión con el filtro aplicado  </returns>
        </member>
        <member name="M:Mecalux.Core.Application.Converters.Convert`2.GetExpression``1(System.String)">
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:Mecalux.Core.Application.Converters.IConvert`2.GetExpression``1(System.String)">
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null" />.</exception>
        </member>
        <member name="T:Mecalux.Core.Caching.Cache">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Caching.Cache.#ctor(Mecalux.Core.Serialization.ISerializerFactory)">
            <inheritdoc />
        </member>
        <member name="P:Mecalux.Core.Caching.Cache.CacheType">
            <summary>
            Tipo de almacenamiento del cache
            </summary>
        </member>
        <member name="M:Mecalux.Core.Caching.Cache.InitialiseInternal">
            <summary>
            Inicializacion del cache
            </summary>
        </member>
        <member name="M:Mecalux.Core.Caching.Cache.SetInternal(System.String,System.String,Mecalux.Core.Caching.ICachePolicy)">
            <summary>
            Guardar valor en el cache
            </summary>
            <param name="key">Clave del cache</param>
            <param name="value">Valor que sera registrado en el cache</param>
            <param name="cachePolicy">Politica de almacenado del cache</param>
        </member>
        <member name="M:Mecalux.Core.Caching.Cache.GetInternal(System.String)">
            <summary>
            Solicitar un valor al cache
            </summary>
            <param name="key">Clave del cache</param>
            <returns>Valor del cache</returns>
        </member>
        <member name="M:Mecalux.Core.Caching.Cache.RemoveInternal(System.String)">
            <summary>
            Elimina el regsitro del cache que contenga la clave solicitada
            </summary>
            <param name="key">Clave del cache</param>
        </member>
        <member name="M:Mecalux.Core.Caching.Cache.ExistsInternal(System.String)">
            <summary>
            Busca si hay un registro del cache con la clave solicitada
            </summary>
            <param name="key">Clave del cache</param>
            <returns>True: si existe un registro en el cache con la clave</returns>
        </member>
        <member name="M:Mecalux.Core.Caching.Cache.GetAllKeysInternal">
            <summary>
            Retorna el listado de claves registradas en el cache
            </summary>
            <returns>Listado de claves</returns>
        </member>
        <member name="M:Mecalux.Core.Caching.Cache.Initialize">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Caching.Cache.Get``1(System.String,Mecalux.Core.Serialization.SerializationFormat)">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Caching.Cache.Set``1(System.String,``0,Mecalux.Core.Caching.ICachePolicy,Mecalux.Core.Serialization.SerializationFormat)">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Caching.Cache.Remove(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Caching.Cache.Exists(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Caching.Cache.Get(System.Type,System.String,Mecalux.Core.Serialization.SerializationFormat)">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Caching.Cache.Set(System.String,System.Object,Mecalux.Core.Caching.ICachePolicy,Mecalux.Core.Serialization.SerializationFormat)">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Caching.Cache.Set(System.String,System.Object,Mecalux.Core.Serialization.SerializationFormat)">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Caching.Cache.GetAllKeys">
            <inheritdoc />
        </member>
        <member name="T:Mecalux.Core.Caching.CacheAttribute">
            <summary>
            Atributo que se usara para marcar los metodos que deseen que usen cache(se debera marcar en las interfaces).
            </summary>
        </member>
        <member name="P:Mecalux.Core.Caching.CacheAttribute.Lifespan">
            <summary>
            Gets the lifespan.
            </summary>
            <value>
            lifespan.
            </value>
        </member>
        <member name="P:Mecalux.Core.Caching.CacheAttribute.Days">
            <summary>
            Gets or sets the days.
            </summary>
            <value>
            Dias de validez.
            </value>
        </member>
        <member name="P:Mecalux.Core.Caching.CacheAttribute.Hours">
            <summary>
            Gets or sets the hours.
            </summary>
            <value>
            Hora de validez.
            </value>
        </member>
        <member name="P:Mecalux.Core.Caching.CacheAttribute.Minutes">
            <summary>
            Gets or sets the minutes.
            </summary>
            <value>
            Minutos de validez.
            </value>
        </member>
        <member name="P:Mecalux.Core.Caching.CacheAttribute.Seconds">
            <summary>
            Gets or sets the seconds.
            </summary>
            <value>
            Segundos de validez.
            </value>
        </member>
        <member name="P:Mecalux.Core.Caching.CacheAttribute.CacheType">
            <summary>
            Gets or sets the cache type.
            </summary>
            <value>
            TIpo de cache.
            </value>
        </member>
        <member name="P:Mecalux.Core.Caching.CacheAttribute.SerializationFormat">
            <summary>
            Gets or sets the serialization format.
            </summary>
            <value>
            Formato de la serializacion.
            </value>
        </member>
        <member name="P:Mecalux.Core.Caching.CacheAttribute.CacheExpiration">
            <summary>
            Gets or sets the cache expiration.
            </summary>
            <value>
            Tipo de expiracion del cache.
            </value>
        </member>
        <member name="P:Mecalux.Core.Caching.CacheAttribute.CachePriority">
            <summary>
            Gets or sets the cache priority.
            </summary>
            <value>
            Prioridad del cache.
            </value>
        </member>
        <member name="P:Mecalux.Core.Caching.CacheAttribute.Key">
            <summary>
            Obtiene o establece el identificador de la caché
            </summary>
        </member>
        <member name="T:Mecalux.Core.Caching.CacheConfiguration">
            <inheritdoc />
        </member>
        <member name="P:Mecalux.Core.Caching.CacheConfiguration.Lifespan">
            <inheritdoc />
        </member>
        <member name="P:Mecalux.Core.Caching.CacheConfiguration.Days">
            <inheritdoc />
        </member>
        <member name="P:Mecalux.Core.Caching.CacheConfiguration.Hours">
            <inheritdoc />
        </member>
        <member name="P:Mecalux.Core.Caching.CacheConfiguration.Minutes">
            <inheritdoc />
        </member>
        <member name="P:Mecalux.Core.Caching.CacheConfiguration.Seconds">
            <inheritdoc />
        </member>
        <member name="P:Mecalux.Core.Caching.CacheConfiguration.CacheType">
            <inheritdoc />
        </member>
        <member name="P:Mecalux.Core.Caching.CacheConfiguration.SerializationFormat">
            <inheritdoc />
        </member>
        <member name="P:Mecalux.Core.Caching.CacheConfiguration.CacheExpiration">
            <inheritdoc />
        </member>
        <member name="P:Mecalux.Core.Caching.CacheConfiguration.CachePriority">
            <inheritdoc />
        </member>
        <member name="P:Mecalux.Core.Caching.CacheConfiguration.Key">
            <inheritdoc />
        </member>
        <member name="P:Mecalux.Core.Caching.CacheConfiguration.CacheFactory">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Caching.CacheConfiguration.#ctor(Mecalux.Core.Caching.ICacheFactory)">
            <summary>
            Constructor.
            </summary>
            <param name="cacheFactory">
            Fábrica de cache.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cacheFactory"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:Mecalux.Core.Caching.CacheExpiration">
            <summary>
            Tipos de expiracion de cache
            </summary>
        </member>
        <member name="F:Mecalux.Core.Caching.CacheExpiration.Absolute">
            <summary>
            Expirará la entrada después de un tiempo determinado.
            </summary>
        </member>
        <member name="F:Mecalux.Core.Caching.CacheExpiration.Sliding">
            <summary>
            Expirará la entrada si no ha sido visitada en un periodo de tiempo.
            </summary>
        </member>
        <member name="T:Mecalux.Core.Caching.CacheFactory">
            <inheritdoc cref="T:Mecalux.Core.Caching.ICacheFactory" />
        </member>
        <member name="M:Mecalux.Core.Caching.CacheFactory.#ctor(Mecalux.Core.IoC.IIocManager)">
            <summary>
            Constructor.
            </summary>
            <param name="iocManager">
            IocManager.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The value of 'IocManager' cannot be null. 
            </exception>
        </member>
        <member name="M:Mecalux.Core.Caching.CacheFactory.Get(Mecalux.Core.Caching.CacheType)">
            <inheritdoc />
        </member>
        <member name="P:Mecalux.Core.Caching.CacheFactory.Memory">
            <inheritdoc />
        </member>
        <member name="P:Mecalux.Core.Caching.CacheFactory.NoSql">
            <inheritdoc />
        </member>
        <member name="T:Mecalux.Core.Caching.CachePolicy">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Caching.CachePolicy.#ctor">
            <inheritdoc />
        </member>
        <member name="P:Mecalux.Core.Caching.CachePolicy.Priority">
            <inheritdoc />
        </member>
        <member name="P:Mecalux.Core.Caching.CachePolicy.CacheExpiration">
            <inheritdoc />
        </member>
        <member name="P:Mecalux.Core.Caching.CachePolicy.Duration">
            <inheritdoc />
        </member>
        <member name="T:Mecalux.Core.Caching.CachePriority">
            <summary>
            Tipos de prioridades a las hora de evaluar la eliminacion del cache por parte de OS
            </summary>
        </member>
        <member name="F:Mecalux.Core.Caching.CachePriority.Default">
            <summary>
            El valor predeterminado de la prioridad de un elemento de la caché es Normal.
            </summary>
        </member>
        <member name="F:Mecalux.Core.Caching.CachePriority.NotRemovable">
            <summary>
            Los elementos de la caché con este nivel de prioridad no se borrarán automáticamente de la memoria caché como el servidor libera la memoria del sistema. 
            Sin embargo, los artículos con este nivel de prioridad se eliminan junto con otros elementos de acuerdo con Absolute o Sliding hora de caducidad del elemento.
            </summary>
        </member>
        <member name="T:Mecalux.Core.Caching.CacheType">
            <summary>
            Tipos de cache disponible para el uso
            </summary>
        </member>
        <member name="F:Mecalux.Core.Caching.CacheType.Memory">
            <summary>
            Implementacion de cache en memoria
            </summary>
        </member>
        <member name="F:Mecalux.Core.Caching.CacheType.NoSql">
            <summary>
            Implementacion de cache en base de datos NoSql
            </summary>
        </member>
        <member name="T:Mecalux.Core.Caching.Exceptions.CacheCouldNotBeLoadedException">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Caching.Exceptions.CacheCouldNotBeLoadedException.#ctor(Mecalux.Core.Caching.CacheType,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Mecalux.Core.Caching.Exceptions.InvalidCacheTypeException">
            <summary>
            No se encuentra un cache registrado para el tipo 
            </summary>
        </member>
        <member name="M:Mecalux.Core.Caching.Exceptions.InvalidCacheTypeException.#ctor(Mecalux.Core.Caching.CacheType)">
            <summary>
            Constructor
            </summary>
            <param name="cacheType">Tipo de cache</param>
        </member>
        <member name="T:Mecalux.Core.Caching.ICache">
            <summary>
            Contrato base para la implementacion de cache
            </summary>
        </member>
        <member name="P:Mecalux.Core.Caching.ICache.CacheType">
            <summary>
            Tipo de almacenamiento del cache
            </summary>
        </member>
        <member name="M:Mecalux.Core.Caching.ICache.Initialize">
            <summary>
            Inicializacion del cache
            </summary>
        </member>
        <member name="M:Mecalux.Core.Caching.ICache.Get``1(System.String,Mecalux.Core.Serialization.SerializationFormat)">
            <summary>
            Solicitar un valor al cache
            </summary>
            <typeparam name="TValue">Tipo del valor que se solicita al cache</typeparam>
            <param name="key">Clave del cache</param>
            <param name="serializationFormat">Formato de la serializacion a la hora de alamcenar en cache</param>
            <returns>Valor del cache <typeparamref name="TValue"/></returns>
        </member>
        <member name="M:Mecalux.Core.Caching.ICache.Set``1(System.String,``0,Mecalux.Core.Caching.ICachePolicy,Mecalux.Core.Serialization.SerializationFormat)">
            <summary>
            Guardar valor en el cache
            </summary>
            <typeparam name="TValue">Tipo del valor que se almacenara en el cache <typeparamref name="TValue"/></typeparam>
            <param name="key">Clave del cache</param>
            <param name="value">Valor que sera registrado en el cache</param>
            <param name="cacheItemPolicy">Politica de almacenado del cache</param>
            <param name="serializationFormat">Formato de la serializacion a la hora de alamcenar en cache</param>
        </member>
        <member name="M:Mecalux.Core.Caching.ICache.Get(System.Type,System.String,Mecalux.Core.Serialization.SerializationFormat)">
            <summary>
            Solicitar un valor al cache
            </summary>
            <param name="type">Tipo del valor alamcenado en el cache</param>
            <param name="key">Clave del cache</param>
            <param name="serializationFormat">Formato de la serializacion a la hora de alamcenar en cache</param>
            <returns>Valor del cache</returns>
        </member>
        <member name="M:Mecalux.Core.Caching.ICache.Set(System.String,System.Object,Mecalux.Core.Caching.ICachePolicy,Mecalux.Core.Serialization.SerializationFormat)">
            <summary>
            Guardar valor en el cache
            </summary>
            <param name="key">Clave del cache</param>
            <param name="value">Valor que sera registrado en el cache</param>
            <param name="cacheItemPolicy">Politica de almacenado del cache</param>
            <param name="serializationFormat">Formato de la serializacion a la hora de alamcenar en cache</param>
        </member>
        <member name="M:Mecalux.Core.Caching.ICache.Set(System.String,System.Object,Mecalux.Core.Serialization.SerializationFormat)">
            <summary>
            Guardar valor en el cache
            </summary>
            <param name="key">Clave del cache</param>
            <param name="value">Valor que sera registrado en el cache</param>
            <param name="serializationFormat">Formato de la serializacion a la hora de almacenar en cache</param>
        </member>
        <member name="M:Mecalux.Core.Caching.ICache.Remove(System.String)">
            <summary>
            Elimina el regsitro del cache que contenga la clave solicitada
            </summary>
            <param name="key">Clave del cache</param>
        </member>
        <member name="M:Mecalux.Core.Caching.ICache.Exists(System.String)">
            <summary>
            Busca si hay un registro del cache con la clave solicitada
            </summary>
            <param name="key">Clave del cache</param>
            <returns>True: si existe un registro en el cache con la clave</returns>
        </member>
        <member name="M:Mecalux.Core.Caching.ICache.GetAllKeys">
            <summary>
            Retorna el listado de claves registradas en el cache
            </summary>
            <returns>Listado de claves</returns>
        </member>
        <member name="T:Mecalux.Core.Caching.ICacheConfiguration">
            <summary>
            Contrato base para la implementacion de las variable de configuracion del cache
            </summary>
        </member>
        <member name="P:Mecalux.Core.Caching.ICacheConfiguration.Lifespan">
            <summary>
            Tiempo de duracion
            </summary>
        </member>
        <member name="P:Mecalux.Core.Caching.ICacheConfiguration.Days">
            <summary>
            Dias 
            </summary>
        </member>
        <member name="P:Mecalux.Core.Caching.ICacheConfiguration.Hours">
            <summary>
            Horas
            </summary>
        </member>
        <member name="P:Mecalux.Core.Caching.ICacheConfiguration.Minutes">
            <summary>
            Minutos
            </summary>
        </member>
        <member name="P:Mecalux.Core.Caching.ICacheConfiguration.Seconds">
            <summary>
            Segundos
            </summary>
        </member>
        <member name="P:Mecalux.Core.Caching.ICacheConfiguration.CacheType">
            <summary>
            Tipo de cache que se usara
            </summary>
        </member>
        <member name="P:Mecalux.Core.Caching.ICacheConfiguration.SerializationFormat">
            <summary>
            Formato de serializacion del cache
            </summary>
        </member>
        <member name="P:Mecalux.Core.Caching.ICacheConfiguration.CacheExpiration">
            <summary>
            Expiracion de los registros que se almacenaran en el cache
            </summary>
        </member>
        <member name="P:Mecalux.Core.Caching.ICacheConfiguration.CachePriority">
            <summary>
            Priorida de los registros que se almacenaran en el cache
            </summary>
        </member>
        <member name="P:Mecalux.Core.Caching.ICacheConfiguration.Key">
            <summary>
            Nombre del cache
            </summary>
        </member>
        <member name="P:Mecalux.Core.Caching.ICacheConfiguration.CacheFactory">
            <summary>
            Fabrica de cache
            </summary>
        </member>
        <member name="T:Mecalux.Core.Caching.ICacheFactory">
            <summary>
            Contrato base para la implementacion de una fabrica de cache
            </summary>
        </member>
        <member name="M:Mecalux.Core.Caching.ICacheFactory.Get(Mecalux.Core.Caching.CacheType)">
            <summary>
            Busca en el contenedor de IoC un cache que aplique para el tipo solicitado
            </summary>
            <param name="cacheType">Tipo del cache que se requiere</param>
            <returns>Cache</returns>
        </member>
        <member name="P:Mecalux.Core.Caching.ICacheFactory.Memory">
            <summary>
            Se almacenan los valores de cache en memoria
            </summary>
            <value>
            The memory.
            </value>
        </member>
        <member name="P:Mecalux.Core.Caching.ICacheFactory.NoSql">
            <summary>
            Se almacenan los valores de cache en una base de datos NoSql
            </summary>
            <value>
            The no sql.
            </value>
        </member>
        <member name="T:Mecalux.Core.Caching.ICachePolicy">
            <summary>
            Contrato base para la implementacion de la politica de almacenado del cache
            </summary>
        </member>
        <member name="P:Mecalux.Core.Caching.ICachePolicy.CacheExpiration">
            <summary>
            Tipo de expiracion del cache
            </summary>
            <value>
            The cache expiration.
            </value>
        </member>
        <member name="P:Mecalux.Core.Caching.ICachePolicy.Priority">
            <summary>
            Prioridad del cache
            </summary>
            <value>
            The priority.
            </value>
        </member>
        <member name="P:Mecalux.Core.Caching.ICachePolicy.Duration">
            <summary>
            Ducacion del cache
            </summary>
            <value>
            The duration.
            </value>
        </member>
        <member name="T:Mecalux.Core.Collections.Extensions.CollectionExtensions">
            <summary>
            Extensiones de ICollection
            </summary>
        </member>
        <member name="M:Mecalux.Core.Collections.Extensions.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Comprueba que una colección sea  nula o no tiene ningún elemento.
            </summary>
            <typeparam name="T">
            </typeparam>
            <param name="collection">
            Colección que se desea comprobar 
            </param>
            <returns>
            Indica si la colección esta vacia o es nula <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:Mecalux.Core.Collections.Extensions.CollectionExtensions.ListComparer``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="listFirst"></param>
            <param name="listSecond"></param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.Core.Collections.Extensions.DictionaryExtensions">
            <summary>
            Extensiones de IDictionary
            </summary>
        </member>
        <member name="M:Mecalux.Core.Collections.Extensions.DictionaryExtensions.TryGetValue``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,``0@)">
            <summary>
            Este método se utiliza para tratar de obtener un valor en un diccionario si es que existe.
            </summary>
            <typeparam name="T">Tipo del valor</typeparam>
            <param name="dictionary">Diccionario donde se realizara la busqueda</param>
            <param name="key">Clave</param>
            <param name="value">Valor de la llave (o el valor por defecto si no existe la clave)</param>
            <returns>True si la clave existe en el diccionario</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> es null.</exception>
        </member>
        <member name="M:Mecalux.Core.Collections.Extensions.DictionaryExtensions.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Obtiene un valor del diccionario con la clave dada. Devuelve el valor por defecto si no se puede encontrar.
            </summary>
            <param name="dictionary">Diccionario donde se realizara la busqueda</param>
            <param name="key">Clave</param>
            <typeparam name="TKey">Tipo de la clave</typeparam>
            <typeparam name="TValue">Tipo del valor</typeparam>
            <returns>Valor si se encuentra, por defecto, si no se puede encontrar.</returns>
        </member>
        <member name="M:Mecalux.Core.Collections.Extensions.DictionaryExtensions.AddRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Copia un diccionario dentro del destino
            </summary>
            <typeparam name="TKey">Tipo de la clave</typeparam>
            <typeparam name="TValue">Tipo del valor</typeparam>
            <param name="target">Destion</param>
            <param name="source">Origen</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:Mecalux.Core.Collections.Extensions.DictionaryExtensions.DictionaryEqual``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Compare two Dictionary
            </summary>
            <param name="first">first dictionay</param>
            <param name="second">second dictionary</param>
            <param name="valueComparer">value to compare</param>
            <typeparam name="TKey">Key</typeparam>
            <typeparam name="TValue">Value</typeparam>
            <returns></returns>
        </member>
        <member name="T:Mecalux.Core.Configuration.AppConfig">
            <inheritdoc cref="T:Mecalux.Core.Configuration.IAppConfig" />
        </member>
        <member name="P:Mecalux.Core.Configuration.AppConfig.Environment">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Configuration.AppConfig.#ctor(Mecalux.Core.Configuration.IAppConfigProvider)">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Configuration.AppConfig.GetValues``1">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Configuration.AppConfig.GetValues(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Configuration.AppConfig.GetValues">
            <inheritdoc />
        </member>
        <member name="T:Mecalux.Core.Configuration.AppSettings">
            <summary>
            Representa la configuración de un recurso
            </summary>
        </member>
        <member name="P:Mecalux.Core.Configuration.AppSettings.Resource">
            <summary>
            Obtiene o establece el recurso de configuración
            </summary>
        </member>
        <member name="P:Mecalux.Core.Configuration.AppSettings.Settings">
            <summary>
            Obtiene o establece los ajustes de configuración
            </summary>
            <summary>
            Listado de variable de configuracion
            </summary>
        </member>
        <member name="P:Mecalux.Core.Configuration.AppSettings.Path">
            <summary>
            Obtiene o establece la ruta donde se encuentra la configuración
            </summary>
        </member>
        <member name="T:Mecalux.Core.Configuration.ConfigurationManager">
            <inheritdoc cref="T:Mecalux.Core.Configuration.IConfigurationManager" />
        </member>
        <member name="M:Mecalux.Core.Configuration.ConfigurationManager.#ctor(Mecalux.Core.IoC.IIocManager,Mecalux.Core.Configuration.IAppConfig)">
            <inheritdoc />
        </member>
        <member name="P:Mecalux.Core.Configuration.ConfigurationManager.AppConfig">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Configuration.ConfigurationManager.RegisterConfiguration``1">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Configuration.ConfigurationManager.RegisterConfiguration(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Configuration.ConfigurationManager.RegisterConfiguration(System.Reflection.Assembly)">
            <inheritdoc />
        </member>
        <member name="T:Mecalux.Core.Configuration.Environment">
            <summary>
            Listado de Ambiente disponibles para la compilacion
            </summary>
        </member>
        <member name="F:Mecalux.Core.Configuration.Environment.Local">
            <summary>
            Ambiente: Local
            </summary>
        </member>
        <member name="F:Mecalux.Core.Configuration.Environment.Develop">
            <summary>
            Ambiente: Develop
            </summary>
        </member>
        <member name="F:Mecalux.Core.Configuration.Environment.Release">
            <summary>
            Ambiente: Release
            </summary>
        </member>
        <member name="F:Mecalux.Core.Configuration.Environment.Master">
            <summary>
            Ambiente: Master
            </summary>
        </member>
        <member name="T:Mecalux.Core.Configuration.IAppConfig">
            <summary>
            Contrato base que define las funcionalidades lectura de recursos de configuracion 
            </summary>
        </member>
        <member name="M:Mecalux.Core.Configuration.IAppConfig.GetValues``1">
            <summary>
            Busqueda de recursos por tipo <typeparamref name="TImpl"/>
            </summary>
            <typeparam name="TImpl">Tipo del recurso</typeparam>
            <returns>Recurso</returns>
        </member>
        <member name="M:Mecalux.Core.Configuration.IAppConfig.GetValues(System.Type)">
            <summary>
            Búsqueda de recursos por tipo
            </summary>
            <param name="impl">Tipo del recurso</param>
            <returns>Recurso</returns>
        </member>
        <member name="M:Mecalux.Core.Configuration.IAppConfig.GetValues">
            <summary>
            Lista de recursos que se encuentran registrados en la configuración
            </summary>
            <returns>Lista de recursos</returns>
        </member>
        <member name="P:Mecalux.Core.Configuration.IAppConfig.Environment">
            <summary>
            Ambiente que se está ejecutando
            </summary>
            <value>
            The environment.
            </value>
        </member>
        <member name="T:Mecalux.Core.Configuration.IAppConfigProvider">
            <summary>
            Contrato base que define las funcionalidades de carga y salvado de las variable de configuracion
            </summary>
        </member>
        <member name="M:Mecalux.Core.Configuration.IAppConfigProvider.Save(System.Collections.Generic.IList{Mecalux.Core.Configuration.AppSettings},Mecalux.Core.Configuration.Environment)">
            <summary>
            Almacenar lo cambios realizados en la configuracion
            </summary>
            <param name="appSettings">Lista de recursos que se desean almacenar</param>
            <param name="environment">Ambiente que se desea salvar</param>
        </member>
        <member name="M:Mecalux.Core.Configuration.IAppConfigProvider.Load(Mecalux.Core.Configuration.Environment)">
            <summary>
            Carga de la configuracion
            </summary>
            <param name="environment">Ambiente que se desea cargar</param>
            <returns>Lista de configuraciones</returns>
        </member>
        <member name="M:Mecalux.Core.Configuration.IAppConfigProvider.Delete(Mecalux.Core.Configuration.Environment)">
            <summary>
            Eliminar una configuracion
            </summary>
            <param name="environment">Ambiente que se desea eliminar</param>
        </member>
        <member name="T:Mecalux.Core.Configuration.IConfigurationManager">
            <summary>
            Contrato base que define las funcionalidades de registro de recursos de configuracion en el contenedor IoC
            </summary>
        </member>
        <member name="M:Mecalux.Core.Configuration.IConfigurationManager.RegisterConfiguration``1">
            <summary>
            Registro de un recurso en contenedor IoC
            </summary>
            <typeparam name="TImpl">Tipo del recurso</typeparam>
        </member>
        <member name="M:Mecalux.Core.Configuration.IConfigurationManager.RegisterConfiguration(System.Type)">
            <summary>
            Registro de un recurso en contenedor IoC
            </summary>
            <param name="impl">Tipo del recurso</param>
        </member>
        <member name="M:Mecalux.Core.Configuration.IConfigurationManager.RegisterConfiguration(System.Reflection.Assembly)">
            <summary>
            Registro de los recursos en contenedor IoC
            <remarks>Solo se tomara en consideracion las clases que implementen la interfaz IConfigurationInstance</remarks>
            </summary>
            <param name="assembly">Ensamblado donde se buscara las clases que implemente las interfaz IConfigurationInstance</param>
        </member>
        <member name="P:Mecalux.Core.Configuration.IConfigurationManager.AppConfig">
            <summary>
            Lista de recursos
            </summary>
        </member>
        <member name="T:Mecalux.Core.Configuration.Setting">
            <summary>
            Clase que representa un ajuste configurable
            </summary>
        </member>
        <member name="P:Mecalux.Core.Configuration.Setting.Value">
            <summary>
            Valor de la variable de configuracion
            </summary>
        </member>
        <member name="P:Mecalux.Core.Configuration.Setting.Name">
            <summary>
            Nombre de la variable de configuracion
            </summary>
        </member>
        <member name="T:Mecalux.Core.Domain.Entities.HMAC.HmacPrincipal`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Mecalux.Core.Domain.Entities.HMAC.HmacPrincipal`1.#ctor(Mecalux.Core.Domain.Entities.HMAC.IHmacToken{`0})">
            <summary>
            
            </summary>
            <param name="hmacToken"></param>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.HMAC.HmacPrincipal`1.App">
            <inheritdoc />
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.HMAC.HmacPrincipal`1.Identity">
            <summary>
            Identity 
            </summary>
        </member>
        <member name="M:Mecalux.Core.Domain.Entities.HMAC.HmacPrincipal`1.IsInRole(System.String)">
            <summary>
            Verifica si el usuario tiene el rol
            </summary>
            <param name="role">Rol que se desea Verificar</param>
            <returns>true si el usuario tiene el rol asignado y false si no lo tiene</returns>
        </member>
        <member name="T:Mecalux.Core.Domain.Entities.HMAC.HmacToken`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Mecalux.Core.Domain.Entities.HMAC.HmacToken`1.#ctor(System.String)">
            <summary>
            The hmac token.
            </summary>
            <param name="authorizationHeader">
            The authorization Header.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="authorizationHeader"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            authorizationHeader
            </exception>
        </member>
        <member name="M:Mecalux.Core.Domain.Entities.HMAC.HmacToken`1.IsValidRequest(System.String,System.String,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Domain.Entities.HMAC.HmacToken`1.GetApp(System.String)">
            <summary>
            
            </summary>
            <param name="appId"></param>
            <returns></returns>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.HMAC.HmacToken`1.IncomingBase64Signature">
            <inheritdoc />
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.HMAC.HmacToken`1.Nonce">
            <inheritdoc />
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.HMAC.HmacToken`1.RequestTimeStamp">
            <inheritdoc />
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.HMAC.IEntityHMAC.Name">
            <summary>
            Nombre
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.HMAC.IEntityHMAC.AppId">
            <summary>
            AppId
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.HMAC.IEntityHMAC.ApiKey">
            <summary>
            ApiKey
            </summary>
        </member>
        <member name="T:Mecalux.Core.Domain.Entities.HMAC.IHmacPrincipal`1">
            <summary>
            IHmacPrincipal
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.HMAC.IHmacPrincipal`1.App">
            <summary>
            App 
            </summary>
        </member>
        <member name="T:Mecalux.Core.Domain.Entities.HMAC.IHmacToken`1">
            <summary>
            The HmacToken interface.
            </summary>
        </member>
        <member name="M:Mecalux.Core.Domain.Entities.HMAC.IHmacToken`1.IsValidRequest(System.String,System.String,System.Byte[])">
            <summary>
            The is valid request.
            </summary>
            <param name="requestHttpMethod">
            The request http method.
            </param>
            <param name="requestUri">
            The request uri.
            </param>
            <param name="httpContent">
            The http content.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.HMAC.IHmacToken`1.App">
            <summary>
            Gets the app.
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.HMAC.IHmacToken`1.IncomingBase64Signature">
            <summary>
            Gets the incoming base 64 signature.
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.HMAC.IHmacToken`1.Nonce">
            <summary>
            Gets the nonce.
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.HMAC.IHmacToken`1.RequestTimeStamp">
            <summary>
            Gets the request time stamp.
            </summary>
        </member>
        <member name="T:Mecalux.Core.Domain.Entities.JWT.EndPointRestClient">
            <summary>
            Recurso
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.EndPointRestClient.Name">
            <summary>
            Nombre del recurso
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.EndPointRestClient.Url">
            <summary>
            Url del recurso
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.EndPointRestClient.Accept">
            <summary>
            MediaTypeFormatter
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.EndPointRestClient.Version">
            <summary>
            Version
            </summary>
        </member>
        <member name="M:Mecalux.Core.Domain.Entities.JWT.EndPointRestClient.GetUrlWithParameters(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Inserta los parametros en la url del recurso
            </summary>
            <param name="parameters">Listado de parametros</param>
            <returns>Url con los parametros añadidos</returns>
        </member>
        <member name="T:Mecalux.Core.Domain.Entities.JWT.RestClientConfiguration">
            <summary>
            Configuracion para consumir una capa rest
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.RestClientConfiguration.BaseUrl">
            <summary>
            Url base del servicio rest
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.RestClientConfiguration.App">
            <summary>
            Nombre de la App
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.RestClientConfiguration.EndPoints">
            <summary>
            Listado de recursos
            </summary>
        </member>
        <member name="M:Mecalux.Core.Domain.Entities.JWT.RestClientConfiguration.GetEndPointUrl(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Busca el end point
            </summary>
            <param name="name">Nombre del end point</param>
            <param name="parameters">parametros</param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.Core.Domain.Entities.JWT.RestClientConfiguration.GetAccept(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.Core.Domain.Entities.JWT.Claim">
            <summary>
            Par clave valor que es usado para colocar valores del usuario que esta utilizando la aplicacion.
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.Claim.Name">
            <summary>
            Nombre.
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.Claim.Value">
            <summary>
            Valor.
            </summary>
        </member>
        <member name="M:Mecalux.Core.Domain.Entities.JWT.Claim.Equals(System.Object)">
            <summary>
            Indica si dos instancia son iguales
            </summary>
            <param name="obj">
            Instancia que se desea comparar.
            </param>
            <returns>
            Indica si es igual o no <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:Mecalux.Core.Domain.Entities.JWT.Claim.GetHashCode">
            <summary>
            Obtiene el código hash de la instancia.
            </summary>
            <returns>
            Código hash de la instancia  <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:Mecalux.Core.Domain.Entities.JWT.Claim.ToString">
            <summary>
            Combierte la instancia en un string.
            </summary>
            <returns>
            Valor de la instancia <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:Mecalux.Core.Domain.Entities.JWT.Header">
            <summary>
            The header.
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.Header.AlgString">
            <summary>
            Valor del algoritmo en string.
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.Header.Type">
            <summary>
            Tipo, el valor por defecto debera ser JWT.
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.Header.Alg">
            <summary>
            Algoritmo.
            </summary>
        </member>
        <member name="M:Mecalux.Core.Domain.Entities.JWT.Header.GetHashAlgorithm(System.String)">
            <summary>
            Transforma un string a la enumeracion HashType
            </summary>
            <param name="algorithm">
            Algoritmo que se desea utilizar, los valores validos son (HS256,HS384,HS512)
            </param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            Algorithm not supported.
            </exception>
            <returns>
            HashType <see cref="T:Mecalux.Core.Cryptography.HashType"/>.
            </returns>
        </member>
        <member name="M:Mecalux.Core.Domain.Entities.JWT.Header.GetHashAlgorithm(Mecalux.Core.Cryptography.HashType)">
            <summary>
            
            </summary>
            <param name="algorithm"></param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.Core.Domain.Entities.JWT.IJwtPrincipal">
            <summary>
            IJwtPrincipal
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.IJwtPrincipal.Type">
            <summary>
            Tipo de token, por defecto es JWT.
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.IJwtPrincipal.Alg">
            <summary>
            Algoritmo
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.IJwtPrincipal.Expiration">
            <summary>
            Expiración  
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.IJwtPrincipal.Subject">
            <summary>
            Subject del token
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.IJwtPrincipal.Name">
            <summary>
            Nombre del usuario
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.IJwtPrincipal.Email">
            <summary>
            Email del usuario
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.IJwtPrincipal.Issuer">
            <summary>
            Issuer del token
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.IJwtPrincipal.Signature">
            <summary>
            Signature
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.IJwtPrincipal.Token">
            <summary>
            Token
            </summary>
        </member>
        <member name="M:Mecalux.Core.Domain.Entities.JWT.IJwtPrincipal.GetValue(System.String)">
            <summary>
            Busca el claim por nombre
            </summary>
            <param name="name">Nombre del claim</param>
            <returns>Claim</returns>
        </member>
        <member name="T:Mecalux.Core.Domain.Entities.JWT.JsonWebToken">
            <summary>
            The json web token.
            </summary>
        </member>
        <member name="F:Mecalux.Core.Domain.Entities.JWT.JsonWebToken.signature">
            <summary>
            The signature.
            </summary>
        </member>
        <member name="M:Mecalux.Core.Domain.Entities.JWT.JsonWebToken.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.Core.Domain.Entities.JWT.JsonWebToken"/> class.
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.JsonWebToken.CreatedRefreshToken">
            <summary>
            Gets or sets a value indicating whether created refresh token.
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.JsonWebToken.Header">
            <summary>
            Header.
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.JsonWebToken.Payload">
            <summary>
            Payload.
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.JsonWebToken.Signature">
            <summary>
            Signature
             </summary>
        </member>
        <member name="M:Mecalux.Core.Domain.Entities.JWT.JsonWebToken.op_Implicit(Mecalux.Core.Domain.Entities.JWT.JwtEngine)~Mecalux.Core.Domain.Entities.JWT.JsonWebToken">
            <summary>
            The op_ implicit.
            </summary>
            <param name="jwtEngine">
            The jwt engine.
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:Mecalux.Core.Domain.Entities.JWT.JwtPrincipal">
            <summary>
            
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.OAuthConfiguration.ApiBaseAddress">
            <summary>
            URL del Api
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.OAuthConfiguration.AppId">
            <summary>
            APPID del Servicio
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.OAuthConfiguration.ApiKey">
            <summary>
            AppKey del Servicio
            </summary>
        </member>
        <member name="M:Mecalux.Core.Domain.Entities.JWT.Payload.InitPayload(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <param name="values">
            The values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref/> is null. 
            </exception>
            <exception cref="T:System.FormatException">
            <paramref/> does not represent a number in a valid format. 
            </exception>
            <exception cref="T:System.OverflowException">
            <paramref/> represents a number that is less than <see cref="F:System.Double.MinValue"/> or greater than <see cref="F:System.Double.MaxValue"/>. 
            </exception>
            <returns>
            The <see cref="T:Mecalux.Core.Domain.Entities.JWT.Payload"/>.
            </returns>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.Payload.Subject">
            <summary>
            The subject.
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.Payload.Issuer">
            <summary>
            The issuer.
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.Payload.ClientId">
            <summary>
            The client id.
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.Payload.Expiration">
            <summary>
            The expiration.
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.Payload.Issued">
            <summary>
            The issued.
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.Payload.UnixTimeStamp">
            <summary>
            The unix time stamp.
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.Payload.Scopes">
            <summary>
            Scopes
            </summary>
        </member>
        <member name="M:Mecalux.Core.Domain.Entities.JWT.Payload.GetScopes">
            <exception cref="T:System.FieldAccessException">
            El autor de la llamada no tiene permiso para obtener acceso a este campo.
            </exception>
            <exception cref="T:System.Reflection.TargetException">
            El campo es no estático y  es null.
            </exception>
            <returns>
            The <see>
                    <cref>List</cref>
                </see>
                .
            </returns>
        </member>
        <member name="T:Mecalux.Core.Domain.Entities.JWT.Token">
            <summary>
            Token
            </summary>
        </member>
        <member name="M:Mecalux.Core.Domain.Entities.JWT.Token.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.Token.AccessToken">
            <summary>
            Token de acceso
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.Token.Type">
            <summary>
            Tipo de Token
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.Token.ExpiresIn">
            <summary>
            TotalMilliseconds desde 1970-1-1
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.Token.UserName">
            <summary>
            Usuario
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.Token.ClientId">
            <summary>
            Cliente que solicita el token
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.Token.Expires">
            <summary>
            Fecha de expiracion
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.Token.Issued">
            <summary>
            Fecha de creacion
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.Token.RefreshToken">
            <summary>
            RefreshToken
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.JWT.Token.Scopes">
            <summary>
            Permisos del token
            </summary>
        </member>
        <member name="M:Mecalux.Core.Domain.Entities.Entity`1.ToJson">
            <summary>
            Serializa el objecto a Json
            </summary>
            <returns>Json</returns>
        </member>
        <member name="T:Mecalux.Core.Domain.Entities.IAuditableEntity">
            <summary>
            Entidad que debera ser utilizada cuando se desee guarda registro de la operación de actualización y creación 
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.IAuditableEntity.CreatedDate">
            <summary>
            Fecha de Creación
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.IAuditableEntity.CreatedBy">
            <summary>
            Usuario que creo la entidad
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.IAuditableEntity.UpdatedDate">
            <summary>
            Fecha de la ultima actualizacion 
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.IAuditableEntity.UpdatedBy">
            <summary>
            Ultimo usuario que actualizo la entidad
            </summary>
        </member>
        <member name="T:Mecalux.Core.Domain.Entities.IDeletionAuditableEntity">
            <summary>
            Entidad que debera ser utilizada cuando se desee guarda registro de la operación de eliminación logica
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.IDeletionAuditableEntity.DeleteDate">
            <summary>
            Fecha de eliminación
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.IDeletionAuditableEntity.DeletedBy">
            <summary>
            Usuario que elimino la entidad
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.IDeletionAuditableEntity.IsDeleted">
            <summary>
            Indica si la entidad esta en estado de eliminación (Logico)
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.IDeletionAuditableEntity.ForceDelete">
            <summary>
            Indica si se desea eliminar la entidad (fisicamente de la tabla)
            </summary>
        </member>
        <member name="M:Mecalux.Core.Domain.Entities.IdentityGenerator.NewSequentialGuid(Mecalux.Core.Domain.Entities.IdentityGeneratorType)">
            <param name="guidType">
            Tipo de secuencia
            </param>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
            No puede obtenerse el proveedor de servicios criptográficos (CSP).
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref/> es null.
            </exception>
            <exception cref="T:System.RankException">
            <paramref/> es multidimensional.
            </exception>
            <returns>
            Guid <see cref="T:System.Guid"/>.
            </returns>
        </member>
        <member name="T:Mecalux.Core.Domain.Entities.IEntity`1">
            <summary>
            Contrato base que debe implementar toda entidad que este contenida en el dominio
            </summary>
            <typeparam name="TPrimaryKey">Tipo del Id del elemento</typeparam>
        </member>
        <member name="P:Mecalux.Core.Domain.Entities.IEntity`1.Id">
            <summary>
            Identificador único.
            </summary>
        </member>
        <member name="M:Mecalux.Core.Domain.Entities.IEntity`1.IsTransient">
            <summary>
            Comprueba si esta entidad es transitoria (no persistido a base de datos y no ha un <see cref="P:Mecalux.Core.Domain.Entities.IEntity`1.Id"/>).
            </summary>
            <returns>True, si esta entidad es transitoria</returns>
        </member>
        <member name="M:Mecalux.Core.Domain.Entities.IEntity`1.ToJson">
            <summary>
            Serializar el objecto a Json
            </summary>
            <returns>Valor de la serializacion</returns>
        </member>
        <member name="T:Mecalux.Core.Domain.Entities.IEntity">
            <summary>
            Contrato base que debe implementar toda entidad que este contenida en el dominio
            </summary>
        </member>
        <member name="M:Mecalux.Core.Domain.Entities.IEntity.GenerateNewIdentity">
            <summary>
            Genera un identificador único con un orden en base a la fecha de generación
            <remarks>Debe ser utilizado de forma obligatoria a la hora de crear un nuevo registro</remarks>
            </summary>
        </member>
        <member name="M:Mecalux.Core.Domain.Entities.IEntity.ChangeCurrentIdentity(System.Guid)">
            <summary>
            Cambia el identificador unico de la entidad
            </summary>
            <param name="identity">Nuevo valor del identificador</param>
        </member>
        <member name="M:Mecalux.Core.Domain.Entities.Validator.MessageResult.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <param name="errorMessage">
            The error Message.
            </param>
            <param name="memberNames">
            The member Names.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errorMessage"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="memberNames"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:Mecalux.Core.Domain.Services.IJwtService">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mecalux.Core.Domain.Services.IJwtService.Encode(Mecalux.Core.Domain.Entities.JWT.JsonWebToken)">
            <summary>
            Procede a Codificar un objecto del tipo JsonWebToken
            </summary>
            <param name="jwt">Objeto JsonWebToken que se desea codificar</param>
            <returns>Token</returns>
        </member>
        <member name="M:Mecalux.Core.Domain.Services.IJwtService.Decode(System.String,System.Boolean)">
            <summary>
            Descodificar
            </summary>
            <param name="token">Token que se desea decodificar</param>
            <param name="verify">Indica si se desea verificar la firma del token, en necesario que este la propiedad Secret inicializada</param>
            <returns>Objeto JsonWebToken con toda la informacion decodificada</returns>
        </member>
        <member name="P:Mecalux.Core.Domain.Services.IJwtService.Secret">
            <summary>
            Key para la resolucion del Hash
            </summary>
        </member>
        <member name="M:Mecalux.Core.Domain.Services.JwtService.#ctor(Mecalux.Core.Cryptography.IKeyedHash)">
            <exception cref="T:System.ArgumentNullException">El valor del parámetro es null.</exception>
        </member>
        <member name="M:Mecalux.Core.Domain.Services.ValidatorService.TryValidate``1(``0,Mecalux.Core.Domain.Entities.Validator.ValidatorResult@)">
            <typeparam name="TEntity">
            </typeparam>
            <param name="entity">
            Entidad que se desea validar
            </param>
            <param name="results">
            Resultados de la validación
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref>
                    <name>collection</name>
                </paramref>
                es null.
            </exception>
            <returns>
            Indica si la entidad es validad <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:Mecalux.Core.Domain.Services.ValidatorService.TryValidate``1(``0,System.String,Mecalux.Core.Domain.Entities.Validator.ValidatorResult@)">
            <typeparam name="TEntity">
            </typeparam>
            <param name="entity">
            Entidad que se desea validar
            </param>
            <param name="nameProperty">
            Nombre de la propiedad que se desea validar.
            </param>
            <param name="results">
            Resultados de la validación.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref>
                    <name>collection</name>
                </paramref>
                es null.
            </exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">
            Existe más de una propiedad con el nombre especificado. Vea la sección Comentarios.
            </exception>
            <returns>
            Indica si la entidad es validad <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:Mecalux.Core.Domain.Extensions.EntityExtensions">
            <summary>
            Extensiones de IDeletionAuditableEntity
            </summary>
        </member>
        <member name="M:Mecalux.Core.Domain.Extensions.EntityExtensions.IsNullOrDeleted(Mecalux.Core.Domain.Entities.IDeletionAuditableEntity)">
            <summary>
            Compruebe si esta Entidad es nula  o esta marcada para eliminar.
            </summary>
            <param name="entity">
            Entidad que se desea comprobar que es nula o se encuentra eliminada
            </param>
            <returns>
            Indica el estado de la entidad <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:Mecalux.Core.Domain.Repositories.CacheRepository`1">
            <summary>
             Clase de la cual se debera heredar  para cubrir la funcionalidad de un CacheRepository
            </summary>
            <typeparam name="TEntity">Tipo del cache</typeparam>
        </member>
        <member name="M:Mecalux.Core.Domain.Repositories.CacheRepository`1.#ctor(Mecalux.Core.Caching.CacheConfiguration)">
            <summary>
            Constructor
            </summary>
            <param name="cacheConfiguration">Valores de configuracion</param>
        </member>
        <member name="P:Mecalux.Core.Domain.Repositories.CacheRepository`1.Key">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Domain.Repositories.CacheRepository`1.Init">
            <summary>
            Metodo para inicializar el cache
            </summary>
            <returns>Valores del cache</returns>
        </member>
        <member name="M:Mecalux.Core.Domain.Repositories.CacheRepository`1.Refresh">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Domain.Repositories.CacheRepository`1.GetAll">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Domain.Repositories.CacheRepository`1.AllMatching(Mecalux.Core.Domain.Specification.ISpecification{`0})">
            <inheritdoc />
        </member>
        <member name="T:Mecalux.Core.Domain.Repositories.ICacheRepository`1">
            <summary>
            Interfaz que debera ser implementada para cubrir la funcionalidad de un CacheRepository
            </summary>
            <typeparam name="TEntity">Tipo del cache</typeparam>
        </member>
        <member name="P:Mecalux.Core.Domain.Repositories.ICacheRepository`1.Key">
            <summary>
            Nombre del cache 
            </summary>
        </member>
        <member name="M:Mecalux.Core.Domain.Repositories.ICacheRepository`1.Refresh">
            <summary>
            Metodo para refrescar el cache
            </summary>
        </member>
        <member name="M:Mecalux.Core.Domain.Repositories.ICacheRepository`1.GetAll">
            <summary>
            Retorna todos los valores del cache
            </summary>
            <returns>Valores del cache</returns>
        </member>
        <member name="M:Mecalux.Core.Domain.Repositories.ICacheRepository`1.AllMatching(Mecalux.Core.Domain.Specification.ISpecification{`0})">
            <summary>
             Retorna todos los valores del cache que cumplan con la especificacion
            </summary>
            <param name="specification">Filtro</param>
            <returns>Valores del cache</returns>
        </member>
        <member name="T:Mecalux.Core.Domain.Repositories.IParameterType">
            <summary>
            Tipo de parametro para XMLs
            </summary>
        </member>
        <member name="M:Mecalux.Core.Domain.Repositories.Repository`2.#ctor(Mecalux.Core.Domain.Uow.IUnitOfWorkManager)">
            <param name="unitOfWorkManager">
            The unit Of Work Manager.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The value of 'unitOfWork' cannot be null. 
            </exception>
        </member>
        <member name="M:Mecalux.Core.Domain.Specification.AndSpecification`1.#ctor(Mecalux.Core.Domain.Specification.ISpecification{`0},Mecalux.Core.Domain.Specification.ISpecification{`0})">
            <param name="leftSide">
            The left Side.
            </param>
            <param name="rightSide">
            The right Side.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The value of 'leftSide' cannot be null. 
            </exception>
        </member>
        <member name="M:Mecalux.Core.Domain.Specification.AndSpecification`1.SatisfiedBy">
            <exception cref="T:System.Exception">
            A delegate callback throws an exception. 
            </exception>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:Mecalux.Core.Domain.Specification.DirectSpecification`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <param name="matchingCriteria">
            The matching Criteria.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The value of 'matchingCriteria' cannot be null. 
            </exception>
        </member>
        <member name="M:Mecalux.Core.Domain.Specification.ExpressionBuilder.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <typeparam name="T">
            </typeparam>
            <param name="first">
            The first.
            </param>
            <param name="second">
            The second.
            </param>
            <param name="merge">
            The merge.
            </param>
            <exception cref="T:System.Exception">
            A delegate callback throws an exception. 
            </exception>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:Mecalux.Core.Domain.Specification.ExpressionBuilder.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <typeparam name="T">
            </typeparam>
            <param name="first">
            The first.
            </param>
            <param name="second">
            The second.
            </param>
            <exception cref="T:System.Exception">
            A delegate callback throws an exception. 
            </exception>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:Mecalux.Core.Domain.Specification.ExpressionBuilder.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <typeparam name="T">
            </typeparam>
            <param name="first">
            The first.
            </param>
            <param name="second">
            The second.
            </param>
            <exception cref="T:System.Exception">
            A delegate callback throws an exception. 
            </exception>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:Mecalux.Core.Domain.Specification.NotSpecification`1.#ctor(Mecalux.Core.Domain.Specification.ISpecification{`0})">
            <param name="originalSpecification">
            The original Specification.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The value of 'originalSpecification' cannot be null. 
            </exception>
        </member>
        <member name="M:Mecalux.Core.Domain.Specification.NotSpecification`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <param name="originalSpecification">
            The original Specification.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The value of 'originalSpecification' cannot be null. 
            </exception>
        </member>
        <member name="M:Mecalux.Core.Domain.Specification.OrSpecification`1.#ctor(Mecalux.Core.Domain.Specification.ISpecification{`0},Mecalux.Core.Domain.Specification.ISpecification{`0})">
            <param name="leftSide">
            The left Side.
            </param>
            <param name="rightSide">
            The right Side.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The value of 'leftSide' cannot be null. 
            </exception>
        </member>
        <member name="M:Mecalux.Core.Domain.Specification.OrSpecification`1.SatisfiedBy">
            <exception cref="T:System.Exception">
            A delegate callback throws an exception. 
            </exception>
            <returns>
            The <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="T:Mecalux.Core.Domain.Uow.Exceptions.UowUpdateConcurrencyError">
            <summary>
            Detalle de la entidad involucrada en el error
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Uow.Exceptions.UowUpdateConcurrencyError.State">
            <summary>
            Estado de la entidad Detached , Unchanged , Added , Deleted , Modified 
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Uow.Exceptions.UowUpdateConcurrencyError.Entity">
            <summary>
            Entidad
            </summary>
        </member>
        <member name="T:Mecalux.Core.Domain.Uow.Exceptions.UowUpdateConcurrencyException`1">
            <summary>
            Representa una excepcion que contine las entidades que generaron algun tipo de error, a la hora de ejecutar una operacion de modificacion de datos
            </summary>
            <typeparam name="TException">Tipo de la excepción</typeparam>
        </member>
        <member name="M:Mecalux.Core.Domain.Uow.Exceptions.UowUpdateConcurrencyException`1.#ctor(`0)">
            <summary>
            Constructor
            </summary>
            <param name="exception">Excepción</param>
        </member>
        <member name="M:Mecalux.Core.Domain.Uow.Exceptions.UowUpdateConcurrencyException`1.Initializer(`0)">
            <summary>
            Metodo para inicializar la carga de los errores que se generaron
            </summary>
            <param name="exception">Excepción</param>
        </member>
        <member name="P:Mecalux.Core.Domain.Uow.Exceptions.UowUpdateConcurrencyException`1.UpdateConcurrencyErrors">
            <summary>
            Listado de entidades que presentan error
            </summary>
        </member>
        <member name="T:Mecalux.Core.Domain.Uow.Exceptions.UowEntityValidationException`1">
            <summary>
            Representa una excepcion que contine los errores de la validacion de las entidades que se involucran en una operación
            </summary>
            <typeparam name="TException">Tipo de la excepción</typeparam>
        </member>
        <member name="M:Mecalux.Core.Domain.Uow.Exceptions.UowEntityValidationException`1.#ctor(`0)">
            <summary>
            Constructor
            </summary>
            <param name="exception">Excepción</param>
        </member>
        <member name="P:Mecalux.Core.Domain.Uow.Exceptions.UowEntityValidationException`1.EntityValidationErrors">
            <summary>
            Listado de errores
            </summary>
        </member>
        <member name="M:Mecalux.Core.Domain.Uow.Exceptions.UowEntityValidationException`1.Initializer(`0)">
            <summary>
            Metodo para inicializar la carga de los errores que se generaron
            </summary>
            <param name="exception">Excepción</param>
        </member>
        <member name="T:Mecalux.Core.Domain.Uow.Exceptions.UowEntityValidationResult">
            <summary>
            Resultado de la validacion de la entidad
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Uow.Exceptions.UowEntityValidationResult.Entity">
            <summary>
            Entitdad que genera el error 
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Uow.Exceptions.UowEntityValidationResult.IsValid">
            <summary>
            Indica si es validad la entidad
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Uow.Exceptions.UowEntityValidationResult.Errors">
            <summary>
            Listado de mensajes de error
            </summary>
        </member>
        <member name="T:Mecalux.Core.Domain.Uow.Exceptions.UowValidationError">
            <summary>
            Error de validacion
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Uow.Exceptions.UowValidationError.Message">
            <summary>
            Mensaje de error
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Uow.Exceptions.UowValidationError.PropertyName">
            <summary>
            Nombre de la propiedad que generar un error
            </summary>
        </member>
        <member name="T:Mecalux.Core.Domain.Uow.IUnitOfWork">
            <summary>
            Interfaz que contiene los metodos para realizar operaciones contra la base de datos
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Uow.IUnitOfWork.Id">
            <summary>
            Id Transacción
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Uow.IUnitOfWork.Transaction">
            <summary>
            Transacción
            </summary>
        </member>
        <member name="M:Mecalux.Core.Domain.Uow.IUnitOfWork.RegisterNew``2(``0)">
            <summary>
            Inserta un nuevo regitro
            </summary>
            <typeparam name="TEntity">Tipo de la entidad</typeparam>
            <typeparam name="TPrimaryKey">Tipo de la clave primaria</typeparam>
            <param name="object">Entidad</param>
        </member>
        <member name="M:Mecalux.Core.Domain.Uow.IUnitOfWork.RegisterDirty``2(``0)">
            <summary>
            Cambia el estado de un registro a modificado
            </summary>
            <typeparam name="TEntity">Tipo de la entidad</typeparam>
            <typeparam name="TPrimaryKey">Tipo de la clave primaria</typeparam>
            <param name="object">Entidad</param>
        </member>
        <member name="M:Mecalux.Core.Domain.Uow.IUnitOfWork.RegisterClean``2(``0)">
            <summary>
            Cambia el estado de un registro a Unchanged
            </summary>
            <typeparam name="TEntity">Tipo de la entidad</typeparam>
            <typeparam name="TPrimaryKey">Tipo de la clave primaria</typeparam>
            <param name="object">Entidad</param>
        </member>
        <member name="M:Mecalux.Core.Domain.Uow.IUnitOfWork.RegisterDelete``2(``0)">
            <summary>
            Cambia el estado de un registro a eliminado, si implimenta la interfaz IDeletionAuditableEntity solo cambiara la propiedad IsDeleted
            </summary>
            <typeparam name="TEntity">Tipo de la entidad</typeparam>
            <typeparam name="TPrimaryKey">Tipo de la clave primaria</typeparam>
            <param name="object">Entidad</param>
        </member>
        <member name="M:Mecalux.Core.Domain.Uow.IUnitOfWork.Commit">
            <summary>
            Ejecuta la operación
            </summary>
        </member>
        <member name="M:Mecalux.Core.Domain.Uow.IUnitOfWork.BeginTransaction(Mecalux.Core.Domain.Uow.ITransactionConfiguration)">
            <summary>
            Comienza la transacción 
            </summary>
            <param name="transactionConfiguration">Configuración de la transacción</param>
        </member>
        <member name="T:Mecalux.Core.Domain.Uow.IUnitOfWorkManager">
            <summary>
            Contrato base para exponer las funcionalides de creacion y recuperacion de UnitOfWork
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Uow.IUnitOfWorkManager.UnitOfWorkCreated">
            <summary>
            Cantidad de UnitOfWork que se han creado
            </summary>
            <value>
            Cantidad de UnitOfWork que se encuentra activas
            </value>
        </member>
        <member name="M:Mecalux.Core.Domain.Uow.IUnitOfWorkManager.CreateUnitOfWork(Mecalux.Core.Domain.Uow.Mode)">
            <summary>
            Crea un UnitOfWork con la cofiguracion solicitada
            <remarks>Por defecto se tomaran los siguientes valores (IsolationLevel.ReadCommitted ,  Propagation.CreateNew)
            </remarks>
            </summary>
            <param name="mode">Modo de creacion</param>
            <returns>UnitOfWork que se creo</returns>
        </member>
        <member name="M:Mecalux.Core.Domain.Uow.IUnitOfWorkManager.CreateUnitOfWork(Mecalux.Core.Domain.Uow.ITransactionConfiguration)">
            <summary>
            Crea un UnitOfWork con la cofiguracion solicitada
            </summary>
            <param name="transactionConfiguration">Configuracion de la transacción</param>
            <returns>>UnitOfWork creada</returns>
        </member>
        <member name="M:Mecalux.Core.Domain.Uow.IUnitOfWorkManager.CurrentUnitOfWork(Mecalux.Core.Domain.Uow.ITransactionConfiguration,System.Boolean@)">
            <summary>
            Crea un UnitOfWork con la cofiguracion solicitada
            </summary>
            <param name="transactionConfiguration">Configuracion de la transacción</param>
            <param name="created">True: si fue necesario crea uan UnitOfWork, en caso de retornar falso es indicativo que no se creo una UnitOfWork</param>
            <returns>UnitOfWork creada o UnitOfWork Activa</returns>
        </member>
        <member name="M:Mecalux.Core.Domain.Uow.IUnitOfWorkManager.CurrentUnitOfWork">
            <summary>
            Retorna el UnitOfWork que se encuentra en uso
            </summary>
            <returns>UnitOfWork en uso</returns>
        </member>
        <member name="T:Mecalux.Core.Domain.Uow.IUnitOfWorkQueryable">
            <summary>
            Interfaz que contiene los metodos de lectura de datos
            </summary>
        </member>
        <member name="M:Mecalux.Core.Domain.Uow.IUnitOfWorkQueryable.Read``2(System.String[])">
            <summary>
            Genera un query para realizar la lectura de una entidad
            </summary>
            <typeparam name="TEntity">Tipo de la entidad</typeparam>
            <typeparam name="TPrimaryKey">Tipo de la clave primaria</typeparam>
            <param name="paths">Relaciones que se desean cargar</param>
            <returns>Query</returns>
        </member>
        <member name="T:Mecalux.Core.Domain.Uow.IUnitOfWorkStatusHandle">
            <summary>
            Interfaz que contine los eventos de estados del UnitOfWork
            </summary>
        </member>
        <member name="E:Mecalux.Core.Domain.Uow.IUnitOfWorkStatusHandle.Completed">
            <summary>
            Evento de ejecución exitosa
            </summary>
        </member>
        <member name="E:Mecalux.Core.Domain.Uow.IUnitOfWorkStatusHandle.Failed">
            <summary>
            Evento de ejecución fallida
            </summary>
        </member>
        <member name="E:Mecalux.Core.Domain.Uow.IUnitOfWorkStatusHandle.Disposed">
            <summary>
            Evento que indica que se realizo disposed al UnitOfWork
            </summary>
        </member>
        <member name="T:Mecalux.Core.Domain.Uow.UnitOfWork">
            <summary>
            Implementacion de la interfaz
            </summary>
        </member>
        <member name="E:Mecalux.Core.Domain.Uow.UnitOfWork.Completed">
            <summary>
            Evento de ejecución exitosa
            </summary>
        </member>
        <member name="E:Mecalux.Core.Domain.Uow.UnitOfWork.Failed">
            <summary>
            Evento de ejecución fallida
            </summary>
        </member>
        <member name="E:Mecalux.Core.Domain.Uow.UnitOfWork.Disposed">
            <summary>
            Evento que indica que se realizo disposed al UnitOfWork
            </summary>
        </member>
        <member name="F:Mecalux.Core.Domain.Uow.UnitOfWork._disposed">
            <summary>
            Indica que la entidad esta marcada para ser eliminada
            </summary>
        </member>
        <member name="M:Mecalux.Core.Domain.Uow.UnitOfWork.#ctor(Mecalux.Core.Domain.Uow.UnitOfWorkConfiguration)">
            <summary>
            The unit of work.
            </summary>
            <param name="configurationUnitOfWork">
            The configuration Unit Of Work.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="configurationUnitOfWork"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:Mecalux.Core.Domain.Uow.Exceptions.DbProviderException">
            The provider , not found
            </exception>
        </member>
        <member name="P:Mecalux.Core.Domain.Uow.UnitOfWork.Connection">
            <summary>
            Conexión de base de datos
            </summary>
        </member>
        <member name="M:Mecalux.Core.Domain.Uow.UnitOfWork.DisposeUow">
            <summary>
            Realizar el dispose a la instancia de la UnitOfWork
            </summary>
        </member>
        <member name="M:Mecalux.Core.Domain.Uow.UnitOfWork.Execute">
            <summary>
            Ejecucion de las operacion de base de datos
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Uow.UnitOfWork.ConfigurationUnitOfWork">
            <summary>
            Configuracion de la UnitOfWork
            </summary>
        </member>
        <member name="M:Mecalux.Core.Domain.Uow.UnitOfWork.Dispose">
            <exception cref="T:System.ArgumentNullException">GC is null. </exception>
        </member>
        <member name="M:Mecalux.Core.Domain.Uow.UnitOfWork.Commit">
            <exception cref="T:System.Exception">A delegate callback throws an exception.</exception>
            <exception cref="T:Mecalux.Core.ExceptionHandling.CoreException">0x000101.Commint</exception>
        </member>
        <member name="T:Mecalux.Core.Domain.Uow.UnitOfWorkAttribute">
            <summary>
            Atributo UnitOfWork, indica si se desea controlar la transaccionalidad en el metodo, se debera colocar a nivel de los metodos de una interfaz.
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Uow.UnitOfWorkAttribute.Propagation">
            <summary>
            Modo de propagacion.
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Uow.UnitOfWorkAttribute.Mode">
            <summary>
            Indica el mode de la transaccione.
            </summary>
        </member>
        <member name="P:Mecalux.Core.Domain.Uow.UnitOfWorkAttribute.IsolationLevel">
            <summary>
            Indica el IsolationLevel.
            </summary>
        </member>
        <member name="M:Mecalux.Core.Domain.Uow.UnitOfWorkAttribute.#ctor">
            <summary>
            Constructor de <see cref="T:Mecalux.Core.Domain.Uow.UnitOfWorkAttribute"/> .
            </summary>
        </member>
        <member name="M:Mecalux.Core.Domain.Uow.UnitOfWorkManager.#ctor(Mecalux.Core.IoC.IIocResolver)">
            <param name="iocResolver">
            The ioc Resolver.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="iocResolver"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:Mecalux.Core.Cryptography.HashType">
            <summary>
            Tipo de algoritmo hash.
            </summary>
        </member>
        <member name="F:Mecalux.Core.Cryptography.HashType.Md5">
            <summary>
            Hash una cadena de entrada y devolver el hash como una cadena hexadecimal de 32 caracteres.
            </summary>
        </member>
        <member name="F:Mecalux.Core.Cryptography.HashType.Sha1">
            <summary>
            El tamaño de hash para la clase SHA1 es de 160 bits.
            </summary>
        </member>
        <member name="F:Mecalux.Core.Cryptography.HashType.Sha256">
            <summary>
            El tamaño de hash para el algoritmo SHA256 es de 256 bits.
            </summary>
        </member>
        <member name="F:Mecalux.Core.Cryptography.HashType.Sha384">
            <summary>
            El tamaño de hash para el algoritmo SHA384 es de 384 bits.
            </summary>
        </member>
        <member name="F:Mecalux.Core.Cryptography.HashType.Sha512">
            <summary>
            El tamaño de hash para el algoritmo SHA512 es de 512 bits.
            </summary>
        </member>
        <member name="T:Mecalux.Core.Cryptography.IEncrypter">
            <summary>
            Representa un encriptador de datos para algoritmos de dos sentidos
            </summary>
        </member>
        <member name="M:Mecalux.Core.Cryptography.IEncrypter.Decrypt(System.String)">
            <summary>
            Desencripta el contenido dado
            </summary>
            <param name="encryptedContent">Contenido encriptado</param>
            <returns>Contenido plano</returns>
        </member>
        <member name="M:Mecalux.Core.Cryptography.IEncrypter.Encrypt(System.String)">
            <summary>
            Encripta el contenido dado
            </summary>
            <param name="plainContent">Contenido a encriptar</param>
            <returns>Contenido encriptado</returns>        
        </member>
        <member name="T:Mecalux.Core.Cryptography.IHash">
            <summary>
            Contrato base para la implementacion las funcionalidades para generar y validar el hash de una variable
            </summary>
        </member>
        <member name="M:Mecalux.Core.Cryptography.IHash.GetHash``1(System.String,Mecalux.Core.Cryptography.HashType)">
            <summary>
            Genera el hash de una variable
            </summary>
            <typeparam name="TEncoding">Encoding</typeparam>
            <param name="text">Valor que se le aplicara Hash</param>
            <param name="hashType">Tipo de hash que se aplicara</param>
            <returns>Hash</returns>
        </member>
        <member name="M:Mecalux.Core.Cryptography.IHash.GetHash(System.Byte[],Mecalux.Core.Cryptography.HashType)">
            <summary>
            Genera el hash de una variable
            </summary>
            <param name="value">Valor que se le aplicara Hash</param>
            <param name="hashType">Tipo de hash que se aplicara</param>
            <returns>Hash</returns>
        </member>
        <member name="M:Mecalux.Core.Cryptography.IHash.CheckHash``1(System.String,System.String,Mecalux.Core.Cryptography.HashType)">
            <summary>
            Valida el hash generado por el metodo GetHash
            </summary>
            <param name="original">Valor original</param>
            <param name="hashString">Valor que tiene aplicado hash</param>
            <param name="hashType">Tipo de hash que se desea validar</param>
            <returns>True: si el hash de original es igual hashString</returns>
        </member>
        <member name="M:Mecalux.Core.Cryptography.IHash.GetHashHex(System.Byte[],Mecalux.Core.Cryptography.HashType)">
            <summary>
            Genera el hash de una variable
            </summary>
            <param name="value">Valor que se le aplicara Hash</param>
            <param name="hashType">Tipo de hash que se aplicara</param>
            <returns>string que representa el hash en hexadecimal</returns>
        </member>
        <member name="T:Mecalux.Core.Cryptography.IKeyedHash">
            <summary>
            Contrato base para la implementacion las funcionalidades para generar y validar el hash de una variable
            <remarks>Para genera el hash se requiere una clave que sera utilizada para la creacion y la validacion</remarks>
            </summary>
        </member>
        <member name="P:Mecalux.Core.Cryptography.IKeyedHash.Key">
            <summary>
            Clave que sera utiliza para genera el hash
            </summary>
        </member>
        <member name="T:Mecalux.Core.Data.Extensions.DbConnectionExtensions">
            <summary>
             Extensiones de <see cref="T:System.Data.Common.DbConnection"/>.
            </summary>
        </member>
        <member name="M:Mecalux.Core.Data.Extensions.DbConnectionExtensions.Provider(System.Data.Common.DbConnection)">
            <summary>
            Obtener el nombre del proveedor de una conexion de base de datos
            </summary>
            <param name="connection">Instancia de una conexion</param>
            <returns>Nombre del proveedor</returns>
        </member>
        <member name="T:Mecalux.Core.ExceptionHandling.Handlers.LogHandler">
            <summary>
            Representa un manejador de excepciones que escribe información en el sistema de logs
            </summary>
        </member>
        <member name="M:Mecalux.Core.ExceptionHandling.Handlers.LogHandler.#ctor(System.String,Mecalux.Core.Log.LogLevel,Mecalux.Core.Log.Priority,System.String)">
            <exception cref="T:System.ArgumentNullException"><paramref name="logManager"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="exceptionMessage"/> is <see langword="null" />.</exception>
        </member>
        <member name="T:Mecalux.Core.ExceptionHandling.Handlers.ReplaceHandler">
            <summary>
            Representa un manejador de excepciones que reemplaza la excepción obtenida por otra
            </summary>
        </member>
        <member name="M:Mecalux.Core.ExceptionHandling.Handlers.ReplaceHandler.#ctor(System.String,System.Type)">
            <exception cref="T:System.ArgumentNullException"><paramref name="exceptionType"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="exceptionMessage"/> is <see langword="null" />.</exception>
        </member>
        <member name="P:Mecalux.Core.ExceptionHandling.Handlers.ReplaceHandler.ExceptionType">
            <summary>
            Obtiene el tipo de excepción gestionada
            </summary>
        </member>
        <member name="P:Mecalux.Core.ExceptionHandling.Handlers.ReplaceHandler.WrapExceptionMessage">
            <summary>
            Obtiene el mensaje resultante de la excepción final
            </summary>
        </member>
        <member name="T:Mecalux.Core.ExceptionHandling.Handlers.WrapHandler">
            <summary>
            Representa un manejador de excepciones que recubre una excepción con otra
            </summary>
        </member>
        <member name="M:Mecalux.Core.ExceptionHandling.Handlers.WrapHandler.#ctor(System.String,System.Type)">
            <exception cref="T:System.ArgumentNullException"><paramref name="exceptionType"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="exceptionMessage"/> is <see langword="null" />.</exception>
        </member>
        <member name="P:Mecalux.Core.ExceptionHandling.Handlers.WrapHandler.ExceptionType">
            <summary>
            Obtiene el tipo de excepción gestionada
            </summary>
        </member>
        <member name="P:Mecalux.Core.ExceptionHandling.Handlers.WrapHandler.WrapExceptionMessage">
            <summary>
            Obtiene el mensaje resultante de la excepción final
            </summary>
        </member>
        <member name="T:Mecalux.Core.ExceptionHandling.IExceptionHandler">
            <summary>
            Representa un interfaz para manejadores de excepciones
            </summary>
        </member>
        <member name="M:Mecalux.Core.ExceptionHandling.IExceptionHandler.Handle(System.Exception,Mecalux.Core.ExceptionHandling.Memory)">
            <summary>
            Gestiona la excepción dada
            </summary>
            <param name="exception">
            Excepción obtenida
            </param>
            <param name="memory">
            Listado de valores que fueron colocados por el programador.
            </param>
            <returns>
            Excepción resultante
            </returns>
        </member>
        <member name="T:Mecalux.Core.ExceptionHandling.IPolicyManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mecalux.Core.ExceptionHandling.PolicyDefinition.#ctor(System.String,System.Collections.Generic.IEnumerable{Mecalux.Core.ExceptionHandling.PolicyEntry})">
            <param name="policyName">
            The policy Id.
            </param>
            <param name="policyEntries">
            The policy Entries.
            </param>
            <exception cref="T:System.ArgumentException">
            policyName
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="policyEntries"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Mecalux.Core.ExceptionHandling.PolicyDefinition.Handle(System.Exception,Mecalux.Core.ExceptionHandling.Memory)">
            <param name="exceptionToHandle">
            The exception To Handle.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="exceptionToHandle"/> is <see langword="null"/>.
            </exception>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:Mecalux.Core.ExceptionHandling.PolicyEntry.#ctor(System.Type,System.Collections.Generic.IEnumerable{Mecalux.Core.ExceptionHandling.IExceptionHandler},Mecalux.Core.ExceptionHandling.PostHandlingAction)">
            <param name="exceptionType">
            The exception Type.
            </param>
            <param name="handlers">
            The handlers.
            </param>
            <param name="postHandlingAction">
            The post Handling Action.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="exceptionType"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="handlers"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Mecalux.Core.ExceptionHandling.PolicyEntry.Handle(System.Exception,Mecalux.Core.ExceptionHandling.Memory)">
            <param name="exceptionToHandle">
            The exception To Handle.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="exceptionToHandle"/> is <see langword="null"/>.
            </exception>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="F:Mecalux.Core.ExceptionHandling.PostHandlingAction.None">
            <summary>
            Indicates that no rethrow should occur.
            </summary>
        </member>
        <member name="F:Mecalux.Core.ExceptionHandling.PostHandlingAction.NotifyRethrow">
            <summary>
            Notify the caller that a rethrow is recommended.
            </summary>
        </member>
        <member name="F:Mecalux.Core.ExceptionHandling.PostHandlingAction.ThrowNewException">
            <summary>
            Throws the exception after the exception has been handled by all handlers in the chain.
            </summary>
        </member>
        <member name="T:Mecalux.Core.ExceptionHandling.PolicyManagerAttribute">
            <summary>
            Atributo UnitOfWork, indica si se desea controlar la transaccionalidad en el metodo, se debera colocar a nivel de los metodos de una interfaz.
            </summary>
        </member>
        <member name="M:Mecalux.Core.Extensions.EventHandlerExtensions.InvokeSafely(System.EventHandler,System.Object)">
            <param name="eventHandler">
            The event Handler.
            </param>
            <param name="sender">
            The sender.
            </param>
            <exception cref="T:System.Exception">
            A delegate callback throws an exception.
            </exception>
        </member>
        <member name="M:Mecalux.Core.Extensions.EventHandlerExtensions.InvokeSafely(System.EventHandler,System.Object,System.EventArgs)">
            <param name="eventHandler">
            The event Handler.
            </param>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
            <exception cref="T:System.Exception">
            A delegate callback throws an exception.
            </exception>
        </member>
        <member name="M:Mecalux.Core.Extensions.EventHandlerExtensions.InvokeSafely``1(System.EventHandler{``0},System.Object,``0)">
            <typeparam name="TEventArgs">
            </typeparam>
            <param name="eventHandler">
            The event Handler.
            </param>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
            <exception cref="T:System.Exception">
            A delegate callback throws an exception.
            </exception>
        </member>
        <member name="M:Mecalux.Core.Extensions.MemoryStreamExtensions.ReadToEnd(System.IO.MemoryStream)">
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.OutOfMemoryException">There is insufficient memory to allocate a buffer for the returned string. </exception>
        </member>
        <member name="M:Mecalux.Core.Extensions.StringExtensions.GetBytes(System.String)">
            <exception cref="T:System.OverflowException">The array is multidimensional and contains more than <see cref="F:System.Int32.MaxValue" /> elements.</exception>
        </member>
        <member name="T:Mecalux.Core.IoC.IIocComponent">
            <summary>
            Contrato base que define las funcionalidades de registro de componentes en el contenedor de IoC
            </summary>
        </member>
        <member name="M:Mecalux.Core.IoC.IIocComponent.CreateComponent">
            <summary>
            Factoria de  Componentes de registro
            </summary>
            <returns>Factoria</returns>
        </member>
        <member name="M:Mecalux.Core.IoC.IIocComponent.RegisterComponent(Mecalux.Core.IoC.Registration.IRegistration)">
            <summary>
            Registro de componente
            </summary>
            <param name="registration">Componente que se desea registrar</param>
        </member>
        <member name="T:Mecalux.Core.IoC.Registration.ComponentRegistration">
            <summary>
             Registro de componentes en el IocContainer
            </summary>
        </member>
        <member name="M:Mecalux.Core.IoC.Registration.ComponentRegistration.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Mecalux.Core.IoC.Registration.ComponentRegistration.#ctor(System.Type[])">
            <summary>
            Constructor
            </summary>
            <param name="contractsType">Otros contratos que debera implementar el servicio</param>
        </member>
        <member name="T:Mecalux.Core.IoC.Registration.Component">
            <summary>
            Componente
            </summary>
        </member>
        <member name="M:Mecalux.Core.IoC.Registration.Component.For``1">
            <summary>
            Factoria de Registro de componente
            </summary>
            <typeparam name="TType">Contrato del servicio</typeparam>
            <returns>Componente para configurar registro de servicios</returns>
        </member>
        <member name="M:Mecalux.Core.IoC.Registration.Component.For``2">
            <summary>
            Factoria de Registro de componente
            </summary>
            <typeparam name="TType1">Contrato del servicio</typeparam>
            <typeparam name="TType2">Contrato del servicio</typeparam>
            <returns>Componente para configurar registro de servicios</returns>
        </member>
        <member name="M:Mecalux.Core.IoC.Registration.Component.For``3">
            <summary>
            Factoria de Registro de componente
            </summary>
            <typeparam name="TType1">Contrato del servicio</typeparam>
            <typeparam name="TType2">Contrato del servicio</typeparam>
            <typeparam name="TType3">Contrato del servicio</typeparam>
            <returns>Componente para configurar registro de servicios</returns>
        </member>
        <member name="M:Mecalux.Core.IoC.Registration.Component.For``4">
            <summary>
            Factoria de Registro de componente
            </summary>
            <typeparam name="TType1">Contrato del servicio</typeparam>
            <typeparam name="TType2">Contrato del servicio</typeparam>
            <typeparam name="TType3">Contrato del servicio</typeparam>
            <typeparam name="TType4">Contrato del servicio</typeparam>
            <returns>Componente para configurar registro de servicios</returns>
        </member>
        <member name="M:Mecalux.Core.IoC.Registration.Component.For``5">
            <summary>
            Factoria de Registro de componente
            </summary>
            <typeparam name="TType1">Contrato del servicio</typeparam>
            <typeparam name="TType2">Contrato del servicio</typeparam>
            <typeparam name="TType3">Contrato del servicio</typeparam>
            <typeparam name="TType4">Contrato del servicio</typeparam>
            <typeparam name="TType5">Contrato del servicio</typeparam>
            <returns>Componente para configurar registro de servicios</returns>
        </member>
        <member name="M:Mecalux.Core.IoC.Registration.Component.For(System.Type)">
            <summary>
            Factoria de Registro de componente
            </summary>
            <param name="type">Tipo del contrato del servicio</param>
            <returns>Componente para configurar registro de servicios</returns>
        </member>
        <member name="M:Mecalux.Core.IoC.Registration.Component.For(System.Type[])">
            <summary>
            Factoria de Registro de componente
            </summary>
            <param name="serviceTypes">Contratos del servicio</param>
            <returns>Componente para configurar registro de servicios</returns>
        </member>
        <member name="M:Mecalux.Core.IoC.Registration.Component.For(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Factoria de Registro de componente
            </summary>
            <param name="serviceTypes">Contratos del servicio</param>
            <returns>Componente para configurar registro de servicios</returns>
        </member>
        <member name="T:Mecalux.Core.IoC.Registration.ComponentRegistration`1">
            <summary>
            Registro de componentes en el IocContainer
            </summary>
            <typeparam name="TType">Contrato que debera implementar el servicio</typeparam>
        </member>
        <member name="M:Mecalux.Core.IoC.Registration.ComponentRegistration`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Mecalux.Core.IoC.Registration.ComponentRegistration`1.#ctor(System.Type[])">
            <summary>
            Constructor
            </summary>
            <param name="contractsType">Otros contratos que debera implementar el servicio</param>
        </member>
        <member name="P:Mecalux.Core.IoC.Registration.ComponentRegistration`1.ContractsType">
            <summary>
            Contratos que debera implementar el servicio
            </summary>
        </member>
        <member name="P:Mecalux.Core.IoC.Registration.ComponentRegistration`1.Object">
            <summary>
            Instancia
            </summary>
        </member>
        <member name="P:Mecalux.Core.IoC.Registration.ComponentRegistration`1.Parameters">
            <summary>
            Parametros
            </summary>
        </member>
        <member name="P:Mecalux.Core.IoC.Registration.ComponentRegistration`1.Keys">
            <summary>
            Nombre de los interceptores que se desean registrar
            </summary>
        </member>
        <member name="P:Mecalux.Core.IoC.Registration.ComponentRegistration`1.TypeInterceptors">
            <summary>
            Tipos de los interceptores que se desean registrar
            </summary>
        </member>
        <member name="P:Mecalux.Core.IoC.Registration.ComponentRegistration`1.Implementation">
            <summary>
            Implementacion
            </summary>
        </member>
        <member name="P:Mecalux.Core.IoC.Registration.ComponentRegistration`1.LifeStyle">
            <summary>
            LifeStyle [ Singleton,Transient,PerRequestLifestyle]
            </summary>
        </member>
        <member name="P:Mecalux.Core.IoC.Registration.ComponentRegistration`1.Name">
            <summary>
            Nombre del componente 
            </summary>
        </member>
        <member name="P:Mecalux.Core.IoC.Registration.ComponentRegistration`1.Default">
            <summary>
            Indica si es la solicutud por defecto
            </summary>
        </member>
        <member name="M:Mecalux.Core.IoC.Registration.ComponentRegistration`1.ImplementedBy``1">
            <summary>
            Indica la implementacion del contrato
            </summary>
            <typeparam name="TImpl">Implementacion</typeparam>
            <returns>Registro de componentes</returns>
        </member>
        <member name="M:Mecalux.Core.IoC.Registration.ComponentRegistration`1.ImplementedBy(System.Type)">
            <summary>
            Indica la implementacion del contrato
            </summary>
            <param name="impl">Tipo del servicio</param>
            <returns>Registro de componentes</returns>
        </member>
        <member name="M:Mecalux.Core.IoC.Registration.ComponentRegistration`1.Named(System.String)">
            <summary>
            Indica el nombre del componente
            </summary>
            <param name="name">Nombre del componente</param>
            <returns>Registro de componentes</returns>
        </member>
        <member name="M:Mecalux.Core.IoC.Registration.ComponentRegistration`1.DependencyLifeStyle(Mecalux.Core.IoC.DependencyLifeStyle)">
            <summary>
            Indica el lifeStyle
            </summary>
            <param name="lifeStyle">LifeStyle</param>
            <returns>Registro de componentes</returns>
        </member>
        <member name="M:Mecalux.Core.IoC.Registration.ComponentRegistration`1.Interceptors(System.String[])">
            <summary>
            Indica los interceptores que se aplicaran a la clase proxy
            </summary>
            <param name="keys">Lista de interceptores</param>
            <returns>Registro de componentes</returns>
        </member>
        <member name="M:Mecalux.Core.IoC.Registration.ComponentRegistration`1.Interceptors(System.Type[])">
            <summary>
            Indica los interceptores que se aplicaran a la clase proxy
            </summary>
            <param name="interceptors">Lista de tipos de los interceptores que se desean registrar</param>
            <returns>Registro de componentes</returns>
        </member>
        <member name="M:Mecalux.Core.IoC.Registration.ComponentRegistration`1.Instance(`0)">
            <summary>
            Registro de instancia 
            </summary>
            <param name="instance">Objeto</param>
            <returns>Registro de componentes</returns>
        </member>
        <member name="M:Mecalux.Core.IoC.Registration.ComponentRegistration`1.SetParameters(System.Object)">
            <summary>
            Registro de parametros con sus valores requeridos para realizar la instanciacion del servicio
            </summary>
            <param name="parameters">Parametros</param>
            <returns>Registro de componentes</returns>
        </member>
        <member name="M:Mecalux.Core.IoC.Registration.ComponentRegistration`1.IsDefault">
            <summary>
            Indica si es el componente por defecto
            </summary>
            <returns>Registro de componentes</returns>
        </member>
        <member name="M:Mecalux.Core.IoC.Registration.ComponentRegistration`1.Register(Mecalux.Core.IoC.IIocManager)">
            <inheritdoc />
        </member>
        <member name="T:Mecalux.Core.IoC.Registration.IRegistration">
            <summary>
            Registro de componente
            </summary>
        </member>
        <member name="M:Mecalux.Core.IoC.Registration.IRegistration.Register(Mecalux.Core.IoC.IIocManager)">
            <summary>
            Registrar el componente en el IocManager
            </summary>
            <param name="kernel">Contenedor</param>
        </member>
        <member name="T:Mecalux.Core.IoC.DependencyLifeStyle">
            <summary>
            Estilo de vida de los servicio registrados en el contenedor IoC
            </summary>
        </member>
        <member name="F:Mecalux.Core.IoC.DependencyLifeStyle.Singleton">
            <summary>
            Instancia es global en el ámbito del recipiente que lo creó
            </summary>
        </member>
        <member name="F:Mecalux.Core.IoC.DependencyLifeStyle.Transient">
            <summary>
            Valor por defecto
            </summary>
        </member>
        <member name="F:Mecalux.Core.IoC.DependencyLifeStyle.PerRequestLifestyle">
            <summary>
            el objeto es global en el ámbito de una solicitud web
            </summary>
        </member>
        <member name="T:Mecalux.Core.IoC.Extensions.IocManagerExtensions">
            <summary>
            Extensiones de <see cref="T:Mecalux.Core.IoC.IIocManager"/>.
            </summary>
        </member>
        <member name="M:Mecalux.Core.IoC.Extensions.IocManagerExtensions.RegisterAssembly(Mecalux.Core.IoC.IIocManager,System.String)">
            <summary>
            </summary>
            <param name="iocManager"></param>
            <param name="assemblyName"></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="assemblyName"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:Mecalux.Core.IoC.Extensions.IocManagerExtensions.RegisterAssembly(Mecalux.Core.IoC.IIocManager,System.String[])">
            <summary>
            </summary>
            <param name="iocManager"></param>
            <param name="assemblyNames"></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="assemblyNames"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:Mecalux.Core.IoC.Extensions.IocManagerExtensions.LoadConfiguration(Mecalux.Core.IoC.IIocManager,System.String,Mecalux.Core.Configuration.Environment)">
            <summary>
            </summary>
            <param name="iocManager"></param>
            <param name="assemblyName"></param>
            <param name="environment"></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="assemblyName"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:Mecalux.Core.IoC.Extensions.IocManagerExtensions.LoadConfiguration(Mecalux.Core.IoC.IIocManager,System.String[],Mecalux.Core.Configuration.Environment)">
            <summary>
            </summary>
            <param name="iocManager"></param>
            <param name="assemblyNames"></param>
            <param name="environment"></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="assemblyNames"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:Mecalux.Core.IoC.Extensions.IocManagerExtensions.Install(Mecalux.Core.IoC.IIocManager,System.String[])">
            <summary>
            
            </summary>
            <param name="iocManager"></param>
            <param name="assemblyNames"></param>
        </member>
        <member name="T:Mecalux.Core.IoC.Extensions.IocResolverExtensions">
            <summary>
             Extensiones de <see cref="T:Mecalux.Core.IoC.IIocResolver"/>
            </summary>
        </member>
        <member name="M:Mecalux.Core.IoC.Extensions.IocResolverExtensions.ResolveAsDisposable``1(Mecalux.Core.IoC.IIocResolver)">
            <summary>
            Extensión que nos apoya en la creacion de una instacion disposable
            </summary>
            <typeparam name="T">Tipo del componente</typeparam>
            <param name="iocResolver">Contenedor IoC</param>
            <returns>Instacion con posibilidades de eliminar del contenedor IoC</returns>
        </member>
        <member name="M:Mecalux.Core.IoC.Extensions.IocResolverExtensions.ResolveAsDisposable``1(Mecalux.Core.IoC.IIocResolver,System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            Extensión que nos apoya en la creacion de una instacion disposable
            </summary>
            <typeparam name="T">Tipo del componente</typeparam>
            <param name="iocResolver">Contenedor IoC</param>
            <param name="arguments">Parametros necesarios para instaciar el componente</param>
            <returns>Instacion con posibilidades de eliminar del contenedor IoC</returns>
        </member>
        <member name="T:Mecalux.Core.IoC.IConfigurationInstance">
            <summary>
            Marca a la clase que implemente esta interfaz , para cargar la configuracion en las propiedades de la clase
            </summary>
        </member>
        <member name="T:Mecalux.Core.IoC.IConventionalDependencyRegistrar">
            <summary>
            Contrato base que define las funcionalidades que se deben aplicar para el registro de convenciones
            </summary>
        </member>
        <member name="M:Mecalux.Core.IoC.IConventionalDependencyRegistrar.RegisterAssembly(Mecalux.Core.IoC.IConventionalRegistrationContext)">
            <summary>
            Registro de implementacion que cumplan con las convenciones
            </summary>
            <param name="context">Contexto que se evaluara</param>
        </member>
        <member name="T:Mecalux.Core.IoC.IConventionalRegistrationContext">
            <summary>
            Contexto de evaluacion de convenciones de registro
            </summary>
        </member>
        <member name="P:Mecalux.Core.IoC.IConventionalRegistrationContext.Assembly">
            <summary>
            Assembly donde se evaluaran las convenciones de registro
            </summary>
            <value>
            The assembly.
            </value>
        </member>
        <member name="P:Mecalux.Core.IoC.IConventionalRegistrationContext.IocManager">
            <summary>
            Administrador del contenedor de IoC, donde se registraran los ensamblados que cumplan con las convenciones
            </summary>
            <value>
            The ioc manager.
            </value>
        </member>
        <member name="T:Mecalux.Core.IoC.IDisposableDependencyObjectWrapper`1">
            <summary>
            Contrato base para definir un objecto disposable
            <remarks>A la hora de ejecutar el dispose se realizara Release en el contenedor IoC </remarks>
            </summary>
            <typeparam name="T">Tipo que se desea utilizar</typeparam>
        </member>
        <member name="P:Mecalux.Core.IoC.IDisposableDependencyObjectWrapper`1.Object">
            <summary>
            Instancia de <typeparamref name="T"/>
            </summary>
            <value>
            Instancia de <typeparamref name="T"/>
            </value>
        </member>
        <member name="T:Mecalux.Core.IoC.IIocInstaller">
            <summary>
            Contrato base que define las funcionalidades de instalacion de servicios al contenedor IoC
            </summary>
        </member>
        <member name="M:Mecalux.Core.IoC.IIocInstaller.Install(Mecalux.Core.IoC.IIocRegister)">
            <summary>
            Instalacion de servicios
            </summary>
            <param name="container">Contenedor IoC</param>
        </member>
        <member name="T:Mecalux.Core.IoC.IIocInterceptor">
            <summary>
             Contrato base que define las funcionalidades de registros de interceptores
            </summary>
        </member>
        <member name="M:Mecalux.Core.IoC.IIocInterceptor.RegisterWithInterceptor``2(System.String,Mecalux.Core.IoC.DependencyLifeStyle)">
            <summary>
            Inicializa el interceptor para el servicio de tipo  <typeparamref name="TImpl"/>
            </summary>
            <typeparam name="TType">Interfaz del servicio</typeparam>
            <typeparam name="TImpl">Implementacion del servicio</typeparam>
            <param name="interceptorName">Nombre del interceptor</param>
            <param name="lifeStyle">Tipo de vida del servicio</param>
        </member>
        <member name="M:Mecalux.Core.IoC.IIocInterceptor.RegisterWithInterceptor``2(System.String[],Mecalux.Core.IoC.DependencyLifeStyle)">
            <summary>
            Inicializa el interceptor para el servicio de tipo  <typeparamref name="TImpl"/>
            </summary>
            <typeparam name="TType">Interfaz del servicio</typeparam>
            <typeparam name="TImpl">Implementacion del servicio</typeparam>
            <param name="interceptors">Nombre de los interceptores que se desean asignar a la implementacion registrada </param>
            <param name="lifeStyle">Tipo de vida del servicio</param>
        </member>
        <member name="M:Mecalux.Core.IoC.IIocInterceptor.RegisterWithInterceptor``3(Mecalux.Core.IoC.DependencyLifeStyle)">
            <summary>
            
            </summary>
            <typeparam name="TType">Interfaz del servicio</typeparam>
            <typeparam name="TImpl">Implementacion del servicio</typeparam>
            <typeparam name="TInter">Interceptor</typeparam>
            <param name="lifeStyle">Tipo de vida del servicio</param>
        </member>
        <member name="M:Mecalux.Core.IoC.IIocInterceptor.RegisterWithInterceptor``2(System.Type[],Mecalux.Core.IoC.DependencyLifeStyle)">
            <summary>
            
            </summary>
            <typeparam name="TType">Interfaz del servicio</typeparam>
            <typeparam name="TImpl">Implementacion del servicio</typeparam>
            <param name="interceptors">Interceptores</param>
            <param name="lifeStyle">Tipo de vida del servicio</param>
        </member>
        <member name="M:Mecalux.Core.IoC.IIocInterceptor.RegisterInterceptor``1(System.String)">
            <summary>
            Registro de interceptor
            </summary>
            <typeparam name="TImpl">Implementacion del interceptor</typeparam>
            <param name="name">Nombre del interceptor</param>
        </member>
        <member name="M:Mecalux.Core.IoC.IIocInterceptor.RegisterWithInterceptor``2(Mecalux.Core.IoC.DependencyLifeStyle)">
            <summary>
            Inicializa el interceptor para el servicio de tipo  <typeparamref name="TImpl"/>
            </summary>
            <param name="lifeStyle">Tipo de vida del servicio</param>
            <typeparam name="TImpl">Implementación del servicio</typeparam>
            <typeparam name="TInter">Interceptor del servicio</typeparam>
        </member>
        <member name="T:Mecalux.Core.IoC.IIocManager">
            <summary>
            Contrato base que define las funcionalidades de un administrador del contenedor de IoC
            </summary>
        </member>
        <member name="M:Mecalux.Core.IoC.IIocManager.CheckForPotentiallyMisconfiguredComponents">
            <summary>
            Compruebe si hay componentes potencialmente configurados incorrectamente
            </summary>
        </member>
        <member name="T:Mecalux.Core.IoC.IIocManagerFactory">
            <summary>
            Contrato de Base para la fábrica del manager de IoC
            </summary>
        </member>
        <member name="M:Mecalux.Core.IoC.IIocManagerFactory.Instance">
            <summary>
            Crear un tipo IIocManager
            </summary>
            <returns>Crear un IIocManager</returns>
        </member>
        <member name="T:Mecalux.Core.IoC.IIocRegister">
            <summary>
            Contrato base que define las funcionalidades de registro de instancias en el contenedor de IoC
            </summary>
        </member>
        <member name="M:Mecalux.Core.IoC.IIocRegister.RegisterAll``1(Mecalux.Core.IoC.DependencyLifeStyle)">
            <summary>
            Registra todos los servicios que sean base de <typeparamref name="TType"/>
            </summary>
            <typeparam name="TType">Contrato del servicio</typeparam>
            <param name="lifeStyle">Tipo de vida del servicio</param>
        </member>
        <member name="M:Mecalux.Core.IoC.IIocRegister.Register``1(Mecalux.Core.IoC.DependencyLifeStyle)">
            <summary>
            Registra el servicio del tipo <typeparamref name="TService"/>
            </summary>
            <typeparam name="TService">Implementacion del servicio</typeparam>
            <param name="lifeStyle">Tipo de vida del servicio</param>
        </member>
        <member name="M:Mecalux.Core.IoC.IIocRegister.Register(System.Type,Mecalux.Core.IoC.DependencyLifeStyle)">
            <summary>
            Registra el servicio 
            </summary>
            <param name="type">Implementacion del servicio</param>
            <param name="lifeStyle">Tipo de vida del servicio</param>
        </member>
        <member name="M:Mecalux.Core.IoC.IIocRegister.Register``2(``1)">
            <summary>
            Registra una instancia del servicio
            </summary>
            <typeparam name="TType">Contrato del servicio</typeparam>
            <typeparam name="TImpl">Implementacion del servicio</typeparam>
            <param name="instance">Instancia del servicio</param>
        </member>
        <member name="M:Mecalux.Core.IoC.IIocRegister.Register``1(``0)">
            <summary>
            Registra una instancia del servicio
            </summary>
            <typeparam name="TImpl">Implementacion del servicio</typeparam>
            <param name="instance">Instancia del servicio</param>
        </member>
        <member name="M:Mecalux.Core.IoC.IIocRegister.RegisterDefault``1(``0)">
            <summary>
            Registra una instancia del servicio por defecto
            </summary>
            <typeparam name="TImpl">Implementacion del servicio</typeparam>
            <param name="instance">Instancia del servicio</param>
        </member>
        <member name="M:Mecalux.Core.IoC.IIocRegister.Register(System.Object)">
            <summary>
            Registra una instancia del servicio
            </summary>
            <param name="instance">Instancia del servicio</param>
        </member>
        <member name="M:Mecalux.Core.IoC.IIocRegister.Register``2(Mecalux.Core.IoC.DependencyLifeStyle)">
            <summary>
             Registra el servicio 
            </summary>
            <typeparam name="TType">Contrato del servicio</typeparam>
            <typeparam name="TImpl">Implementacion del servicio</typeparam>
            <param name="lifeStyle">Tipo de vida del servicio</param>
        </member>
        <member name="M:Mecalux.Core.IoC.IIocRegister.Register(System.Type,System.Type,Mecalux.Core.IoC.DependencyLifeStyle)">
            <summary>
             Registra el servicio 
            </summary>
            <param name="type">Contrato del servicio</param>
            <param name="impl">Implementacion del servicio</param>
            <param name="lifeStyle">Tipo de vida del servicio</param>
        </member>
        <member name="M:Mecalux.Core.IoC.IIocRegister.Register``2(System.Object,Mecalux.Core.IoC.DependencyLifeStyle)">
            <summary>
             Registra el servicio 
            </summary>
            <typeparam name="TType">Contrato del servicio</typeparam>
            <typeparam name="TImpl">Implementacion del servicio</typeparam>
            <param name="parameters">Parametros necesarios para la construccion del servicio</param>
            <param name="lifeStyle">Tipo de vida del servicio</param>
        </member>
        <member name="M:Mecalux.Core.IoC.IIocRegister.IsRegistered(System.Type)">
            <summary>
            Retorna true si el servicio se encuentra registrado en el contenedor IoC
            </summary>
            <param name="type">Implementacion del servicio o contrato del servicio</param>
            <returns>true: registrado , false: no registrado</returns>
        </member>
        <member name="M:Mecalux.Core.IoC.IIocRegister.IsRegistered(System.String)">
            <summary>
             Retorna true si el servicio se encuentra registrado en el contenedor IoC
            </summary>
            <param name="name">Nombre del servicio</param>
            <returns>true: registrado , false: no registrado</returns>
        </member>
        <member name="M:Mecalux.Core.IoC.IIocRegister.IsRegistered``1">
            <summary>
            Retorna true si el servicio se encuentra registrado en el contenedor IoC
            </summary>
            <typeparam name="TType">Implementacion del servicio o contrato del servicio</typeparam>
            <returns>true: registrado , false: no registrado</returns>
        </member>
        <member name="T:Mecalux.Core.IoC.IIocResolver">
            <summary>
            Contrato base que define las funcionalidades de resolucion de instancias al contenedor de IoC
            </summary>
        </member>
        <member name="M:Mecalux.Core.IoC.IIocResolver.Resolve``1">
            <summary>
            Resuelve una instancia del component <typeparamref name="T"/>
            </summary>
            <typeparam name="T">Tipo del componente</typeparam>
            <returns>Componente valido</returns>
        </member>
        <member name="M:Mecalux.Core.IoC.IIocResolver.Resolve``1(System.String)">
            <summary>
            Resuelve una instancia del component <typeparamref name="T"/>
            </summary>
            <typeparam name="T">Tipo del componente</typeparam>
            <param name="name">Nombre del servicio</param>
            <returns>Componente valido</returns>
        </member>
        <member name="M:Mecalux.Core.IoC.IIocResolver.ResolveAll``1">
            <summary>
            Resuelve todos los componentes validos que sean del tipo <typeparamref name="T"/>
            </summary>
            <typeparam name="T">Tipo del componente</typeparam>
            <returns>Componentes validos</returns>
        </member>
        <member name="M:Mecalux.Core.IoC.IIocResolver.ResolveAll(System.Type)">
            <summary>
             Resuelve todos los componentes validos que sean del tipo 
            </summary>
            <param name="type">Tipo del componente</param>
            <returns>Componentes validos</returns>
        </member>
        <member name="M:Mecalux.Core.IoC.IIocResolver.Resolve``1(System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            Resuelve una instancia del component <typeparamref name="T"/>
            </summary>
            <typeparam name="T">Tipo del componente</typeparam>
            <param name="arguments">Parametros necesarios para instaciar el componente</param>
            <returns>Componente valido</returns>
        </member>
        <member name="M:Mecalux.Core.IoC.IIocResolver.Resolve``1(System.Collections.Generic.IDictionary{System.Object,System.Object},System.String)">
            <summary>
            Resuelve una instancia del component <typeparamref name="T"/>
            </summary>
            <typeparam name="T">Tipo del componente</typeparam>
            <param name="arguments">Parametros necesarios para instaciar el componente</param>
            <param name="name">Nombre del servicio</param>
            <returns>Componente valido</returns>
        </member>
        <member name="M:Mecalux.Core.IoC.IIocResolver.Resolve(System.Type)">
            <summary>
            Resuelve una instancia del component
            </summary>
            <param name="type">Tipo del componente</param>
            <returns>Componente valido</returns>
        </member>
        <member name="M:Mecalux.Core.IoC.IIocResolver.Resolve(System.Type,System.String)">
            <summary>
            Resuelve una instancia del component
            </summary>
            <param name="type">Tipo del componente</param>
            <param name="name">Nombre del servicio</param>
            <returns>Componente valido</returns>
        </member>
        <member name="M:Mecalux.Core.IoC.IIocResolver.Resolve(System.Type,System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            Resuelve una instancia del component 
            </summary>
            <param name="type">Tipo del componente</param>
            <param name="arguments">Parametros necesarios para instaciar el componente</param>
            <returns>Componente valido</returns>
        </member>
        <member name="M:Mecalux.Core.IoC.IIocResolver.Resolve(System.Type,System.Collections.Generic.IDictionary{System.Object,System.Object},System.String)">
            <summary>
            Resuelve una instancia del component 
            </summary>
            <param name="type">Tipo del componente</param>
            <param name="arguments">Parametros necesarios para instaciar el componente</param>
            <param name="name">Nombre del servicio</param>
            <returns>Componente valido</returns>
        </member>
        <member name="M:Mecalux.Core.IoC.IIocResolver.Release(System.Object)">
            <summary>
            Eliminar la instancia de un componente
            </summary>
            <param name="obj">Componente que se desea eliminar</param>
        </member>
        <member name="T:Mecalux.Core.IoC.IocManagerFactory">
            <summary>
            Factoria del IocManager.
            </summary>
        </member>
        <member name="F:Mecalux.Core.IoC.IocManagerFactory._currentIoCManagerFactory">
            <summary>
            Factoria actual que se encuentra en uso.
            </summary>
        </member>
        <member name="M:Mecalux.Core.IoC.IocManagerFactory.SetCurrent(Mecalux.Core.IoC.IIocManagerFactory)">
            <summary>
            Inicializa la fábrica del Manager del IoC, que sera utilizada
            </summary>
            <param name="iocManagerFactory">IIocManagerFactory </param>
        </member>
        <member name="M:Mecalux.Core.IoC.IocManagerFactory.Instance">
            <summary>
            Instaciar un manager de IoC
            </summary>
            <returns>Manager de IoC instaciado</returns>
        </member>
        <member name="M:Mecalux.Core.IoC.IocManagerFactory.Dispose">
            <summary>
            Operacion dispose sobre la fábrica del manager de IoC 
            </summary>
        </member>
        <member name="T:Mecalux.Core.IoC.IPerWebRequestLifestyle">
            <summary>
            Marca a la clase que implemente esta interfaz , para ser registrada en el IoC Container como LifestylePerWebRequest
            <remarks>el objeto es global en el ámbito de una solicitud web </remarks>
            </summary>
        </member>
        <member name="T:Mecalux.Core.IoC.ISingletonDependency">
            <summary>
            Marca a la clase que implemente esta interfaz , para ser registrada en el IoC Container como LifestyleSingleton
            <remarks>Instancia es global en el ámbito del recipiente que lo creó</remarks>
            </summary>
        </member>
        <member name="T:Mecalux.Core.IoC.ITransientDependency">
            <summary>
            Marca a la clase que implemente esta interfaz , para ser registrada en el IoC Container como LifestyleTransient
            <remarks></remarks>
            </summary>
        </member>
        <member name="T:Mecalux.Core.Log.ILogManager">
            <summary>
            Interfaz de Logger
            </summary>
        </member>
        <member name="M:Mecalux.Core.Log.ILogManager.SetCurrentLogger(System.String)">
            <summary>
            Inicializa el logger
            </summary>
            <param name="loggerName">logger donde se desea escribir el mensaje</param>
        </member>
        <member name="M:Mecalux.Core.Log.ILogManager.GetCurrentLoggerConfiguration">
            <summary>
            Configuracion del logger que esta activo
            </summary>
            <returns>Configuración</returns>
        </member>
        <member name="M:Mecalux.Core.Log.ILogManager.Write``1(``0,Mecalux.Core.Log.LogLevel,Mecalux.Core.Serialization.SerializationFormat)">
            <summary>
            Escribe un mensaje
            </summary>
            <typeparam name="T">Tipo del item</typeparam>
            <param name="item">objecto que se desea utilizar en el log</param>
            <param name="level">Nivel de log al que va dirigido el mensaje</param>
            <param name="serializationFormat">Formato de serializacion</param>
        </member>
        <member name="M:Mecalux.Core.Log.ILogManager.Write(System.String,Mecalux.Core.Log.LogLevel,System.Exception)">
            <summary>
            Escribe un mensaje
            </summary>
            <param name="message">Mensaje. Permite valores vacíos</param>
            <param name="level">Nivel de log al que va dirigido el mensaje</param>
            <param name="exception">Excepción que se desea trazar</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Mecalux.Core.Log.ILogManager.Write(System.String,Mecalux.Core.Log.LogLevel,Mecalux.Core.Log.Priority,System.Exception)">
            <summary>
            Escribe un mensaje
            </summary>
            <param name="message">Mensaje. Permite valores vacíos</param>
            <param name="level">Nivel de log al que va dirigido el mensaje</param>
            <param name="priority">Prioridad del mensaje</param>
            <param name="exception">Excepción que se desea trazar</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Mecalux.Core.Log.ILogManager.Write(System.String[],Mecalux.Core.Log.LogLevel,Mecalux.Core.Log.Priority,System.Exception)">
            <summary>
            Escribe los mensajes indicados
            </summary>
            <param name="messages">Mensajes. Permite valores vacíos</param>
            <param name="level">Nivel de log al que va dirigido el mensaje</param>
            <param name="priority">Prioridad del mensaje</param>
            <param name="exception">Excepción que se desea trazar</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Mecalux.Core.Log.ILogManager.WriteLogStatus">
            <summary>
            Escribe el estado actual del log
            </summary>
        </member>
        <member name="M:Mecalux.Core.Log.ILogManager.Write``1(System.String,``0,Mecalux.Core.Log.LogLevel,Mecalux.Core.Serialization.SerializationFormat)">
            <summary>
            Escribe un mensaje
            </summary>
            <param name="loggerName">logger donde se desea escribir el mensaje</param>
            <typeparam name="T">Tipo del item</typeparam>
            <param name="item">objecto que se desea utilizar en el log</param>
            <param name="level">Nivel de log al que va dirigido el mensaje</param>
            <param name="serializationFormat">Formato de serializacion</param>
        </member>
        <member name="M:Mecalux.Core.Log.ILogManager.Write(System.String,System.String,Mecalux.Core.Log.LogLevel,System.Exception)">
            <summary>
            Escribe un mensaje
            </summary>
            <param name="loggerName">logger donde se desea escribir el mensaje</param>
            <param name="message">Mensaje. Permite valores vacíos</param>
            <param name="level">Nivel de log al que va dirigido el mensaje</param>
            <param name="exception">Excepción que se desea trazar</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Mecalux.Core.Log.ILogManager.Write(System.String,System.String,Mecalux.Core.Log.LogLevel,Mecalux.Core.Log.Priority,System.Exception)">
            <summary>
            Escribe un mensaje
            </summary>
            <param name="loggerName">logger donde se desea escribir el mensaje</param>
            <param name="message">Mensaje. Permite valores vacíos</param>
            <param name="level">Nivel de log al que va dirigido el mensaje</param>
            <param name="priority">Prioridad del mensaje</param>
            <param name="exception">Excepción que se desea trazar</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Mecalux.Core.Log.ILogManager.Write(System.String,System.String[],Mecalux.Core.Log.LogLevel,Mecalux.Core.Log.Priority,System.Exception)">
            <summary>
            Escribe los mensajes indicados
            </summary>
            <param name="loggerName">logger donde se desea escribir el mensaje</param>
            <param name="messages">Mensajes. Permite valores vacíos</param>
            <param name="level">Nivel de log al que va dirigido el mensaje</param>
            <param name="priority">Prioridad del mensaje</param>
            <param name="exception">Excepción que se desea trazar</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Mecalux.Core.Log.ILogManager.Write(System.String,System.Collections.Generic.Dictionary{System.String,System.String},Mecalux.Core.Log.LogLevel,Mecalux.Core.Log.Priority)">
            <summary>
            Escribe un registro destinado a ser almacenado en una base de datos
            </summary>
            <param name="loggerName">logger donde se desea escribir el mensaje</param>
            <param name="genericProperties">Lista de propiedades genéricas (nombre, valor)</param>
            <param name="level">Nivel de log al que va dirigido el mensaje</param>
            <param name="priority">Prioridad del mensaje</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Mecalux.Core.Log.ILogManager.WriteLogStatus(System.String)">
            <summary>
            Escribe el estado actual del log
            </summary>
            <param name="loggerName">logger donde se desea escribir el mensaje</param>
        </member>
        <member name="T:Mecalux.Core.Log.LoggerAttribute">
            <summary>
            Atributo LoggerAttribute, que indicara en que logger se escribira la traza
            </summary>
        </member>
        <member name="P:Mecalux.Core.Log.LoggerAttribute.LoggerName">
            <summary>
            Nombre del loggger que se utilizara.
            </summary>
        </member>
        <member name="M:Mecalux.Core.Log.LoggerAttribute.#ctor(System.String)">
            <summary>
            Constructor de <see cref="T:Mecalux.Core.Log.LoggerAttribute"/> .
            </summary>
        </member>
        <member name="T:Mecalux.Core.Log.LoggerConfiguration">
            <summary>
            Configuracion del logger.
            </summary>
        </member>
        <member name="P:Mecalux.Core.Log.LoggerConfiguration.Name">
            <summary>
            Obtiene o establece el nombre del log
            </summary>
        </member>
        <member name="P:Mecalux.Core.Log.LoggerConfiguration.IncludeExceptionCallStacks">
            <summary>
            Obtiene o establece el indicador para añadir la pila de llamadas a la información de una excepción
            </summary>
        </member>
        <member name="P:Mecalux.Core.Log.LoggerConfiguration.IncludeNoExceptionCallStacks">
            <summary>
            Obtiene o establece el indicador para añadir la pila de llamadas incluso en caso de no haber excepción
            </summary>
        </member>
        <member name="P:Mecalux.Core.Log.LoggerConfiguration.WriteLogStatus">
            <summary>
            Obtiene o establece el indicador para escribir la información de estado del log
            </summary>
        </member>
        <member name="P:Mecalux.Core.Log.LoggerConfiguration.IsDebugEnabled">
            <summary>
            Obtiene o establece el indicador de trazas de debug
            </summary>
        </member>
        <member name="P:Mecalux.Core.Log.LoggerConfiguration.IsErrorEnabled">
            <summary>
            Obtiene o establece el indicador de trazas de excepciones
            </summary>
        </member>
        <member name="P:Mecalux.Core.Log.LoggerConfiguration.ConfigFile">
            <summary>
            Archivo de configuración
            </summary>
        </member>
        <member name="T:Mecalux.Core.Log.LoggerException">
            <summary>
            Exception
            </summary>
        </member>
        <member name="T:Mecalux.Core.Log.LoggerException.Messages">
            <summary>
            Mensajes predefinidos de las excepciones
            </summary>
        </member>
        <member name="F:Mecalux.Core.Log.LoggerException.Messages.CONFIG_FILE_NOT_FOUND">
            <summary>
            The given configuration file is not found or is not valid
            </summary>
        </member>
        <member name="F:Mecalux.Core.Log.LoggerException.Messages.LOGGER_NAME_NOT_FOUND">
            <summary>
            Logger name not found
            </summary>
        </member>
        <member name="F:Mecalux.Core.Log.LoggerException.Messages.CURRENT_LOGGER_NOT_SET">
            <summary>
            Current logger not set
            </summary>
        </member>
        <member name="M:Mecalux.Core.Log.LoggerException.#ctor(System.String,System.Exception)">
            <summary>
            Ctor.
            </summary>
            <param name="message">Mensaje con la descripción del error</param>
            <param name="innerException">Excepción que causa la excepción actual</param>
            <see cref="T:Mecalux.Core.Log.LoggerException.Messages"/>
        </member>
        <member name="M:Mecalux.Core.Log.LoggerException.#ctor(System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="message">Mensaje con la descripción del error</param>
            <see cref="T:Mecalux.Core.Log.LoggerException.Messages"/>
        </member>
        <member name="M:Mecalux.Core.Log.LoggerException.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="T:Mecalux.Core.Log.LogLevel">
            <summary>
            Niveles del log
            </summary>
        </member>
        <member name="F:Mecalux.Core.Log.LogLevel.Trace">
            <summary>
            0
            </summary>
        </member>
        <member name="F:Mecalux.Core.Log.LogLevel.Debug">
            <summary>
            1
            </summary>
        </member>
        <member name="F:Mecalux.Core.Log.LogLevel.Info">
            <summary>
            2
            </summary>
        </member>
        <member name="F:Mecalux.Core.Log.LogLevel.Warn">
            <summary>
            3
            </summary>
        </member>
        <member name="F:Mecalux.Core.Log.LogLevel.Error">
            <summary>
            4
            </summary>
        </member>
        <member name="F:Mecalux.Core.Log.LogLevel.Fatal">
            <summary>
            5
            </summary>
        </member>
        <member name="T:Mecalux.Core.Log.LogManagerConfiguration">
            <summary>
            Configuracion del administrador de loggers
            </summary>
        </member>
        <member name="F:Mecalux.Core.Log.LogManagerConfiguration._serializerFactory">
            <summary>
            Fábrica de serializadores.
            </summary>
        </member>
        <member name="M:Mecalux.Core.Log.LogManagerConfiguration.#ctor(Mecalux.Core.Serialization.ISerializerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Mecalux.Core.Log.LogManagerConfiguration"/> class.
            </summary>
            <param name="serializerFactory">
            The serializer factory.
            </param>
            <exception cref="T:System.ArgumentNullException">
            </exception>
        </member>
        <member name="M:Mecalux.Core.Log.LogManagerConfiguration.Initialize(Mecalux.Core.Serialization.ISerializerFactory)">
            <summary>
            The initialize.
            </summary>
            <param name="serializerFactory">
            The serializer factory.
            </param>
            <exception cref="T:System.ArgumentNullException">
            </exception>
        </member>
        <member name="P:Mecalux.Core.Log.LogManagerConfiguration.Serializer">
            <summary>
            Serializador
            </summary>
        </member>
        <member name="P:Mecalux.Core.Log.LogManagerConfiguration.Loggers">
            <summary>
            Lista de loggers
            </summary>
        </member>
        <member name="T:Mecalux.Core.Log.Priority">
            <summary>
            Prioridad del log
            </summary>
        </member>
        <member name="F:Mecalux.Core.Log.Priority.NotDefined">
            <summary>
            -1
            </summary>
        </member>
        <member name="F:Mecalux.Core.Log.Priority.None">
            <summary>
            0
            </summary>
        </member>
        <member name="F:Mecalux.Core.Log.Priority.Low">
            <summary>
            1
            </summary>
        </member>
        <member name="F:Mecalux.Core.Log.Priority.Normal">
            <summary>
            2
            </summary>
        </member>
        <member name="F:Mecalux.Core.Log.Priority.High">
            <summary>
            3
            </summary>
        </member>
        <member name="F:Mecalux.Core.Log.Priority.Critical">
            <summary>
            4
            </summary>
        </member>
        <member name="T:Mecalux.Core.Reflection.AssemblyFinder">
            <summary>
            Implementacion por defecto de <see cref="T:Mecalux.Core.Reflection.IAssemblyFinder"/>.
            </summary>
        </member>
        <member name="M:Mecalux.Core.Reflection.AssemblyFinder.GetAllAssemblies">
            <exception cref="T:System.AppDomainUnloadedException">Se ha intentado realizar la operación en un dominio de aplicación descargado.</exception>
        </member>
        <member name="M:Mecalux.Core.Reflection.AssemblyFinder.GetAssembly(System.String)">
            <exception cref="T:System.AppDomainUnloadedException">Se ha intentado realizar la operación en un dominio de aplicación descargado.</exception>
        </member>
        <member name="T:Mecalux.Core.Reflection.AttributeFinder">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mecalux.Core.Reflection.AttributeFinder.GetAttributeOrNull``1(System.Reflection.MemberInfo)">
            <exception cref="T:System.TypeLoadException">Un tipo de atributo personalizado no puede cargarse.</exception>
            <exception cref="T:System.InvalidOperationException">Este miembro pertenece a un tipo que se carga en el contexto de sólo reflexión. Vea Cómo: Cargar ensamblados en el contexto de sólo reflexión.</exception>
            <exception cref="T:System.ArgumentNullException">Si <paramref name="attributeType" /> es null.</exception>
        </member>
        <member name="M:Mecalux.Core.Reflection.AttributeFinder.GetAttributeOrNull``1(System.Type)">
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> es null.</exception>
            <exception cref="T:System.TypeLoadException">Un tipo de atributo personalizado no puede cargarse.</exception>
            <exception cref="T:System.InvalidOperationException">Este miembro pertenece a un tipo que se carga en el contexto de sólo reflexión. Vea Cómo: Cargar ensamblados en el contexto de sólo reflexión.</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">El objeto <see cref="T:System.Type" /> actual representa un tipo que implementa la misma interfaz genérica con argumentos de tipo distintos.</exception>
        </member>
        <member name="M:Mecalux.Core.Reflection.AttributeFinder.GetAttributeOrNull``1(System.Type,System.Reflection.MemberInfo)">
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> es null.</exception>
            <exception cref="T:System.TypeLoadException">Un tipo de atributo personalizado no puede cargarse.</exception>
            <exception cref="T:System.InvalidOperationException">Este miembro pertenece a un tipo que se carga en el contexto de sólo reflexión. Vea Cómo: Cargar ensamblados en el contexto de sólo reflexión.</exception>
            <exception cref="T:System.Reflection.AmbiguousMatchException">El objeto <see cref="T:System.Type" /> actual representa un tipo que implementa la misma interfaz genérica con argumentos de tipo distintos.</exception>
        </member>
        <member name="T:Mecalux.Core.Reflection.IObjectInfo">
            <summary>
            Contrato para Obtener la información de un tipo en particular
            </summary>
            <typeparam name="T">Tipo</typeparam>
        </member>
        <member name="M:Mecalux.Core.Reflection.IObjectInfo.GetConstructors(System.Type)">
            <summary>
            Obtiene la lista de constructores de un tipo 
            </summary>
            <param name="type">Tipo</param>
            <returns>Lista de constructores que contienen el tipo</returns>
        </member>
        <member name="M:Mecalux.Core.Reflection.IObjectInfo.GetConstructor(System.Type,System.Type[])">
            <summary>
            Obtiene un constructor de un tipo, segun los tipos de los parametros
            </summary>
            <param name="type">Tipo</param>
            <param name="args"></param>
            <returns>Informacion del constructor</returns>
        </member>
        <member name="M:Mecalux.Core.Reflection.IObjectInfo.GetConstructors(System.Type,System.Type[])">
            <summary>
             Obtiene un constructor de un tipo, segun los argumentos genericos 
            </summary>
            <param name="type">Tipo</param>
            <param name="genericTypes">Lista de argumentos genericos</param>
            <returns>Informacion del constructor</returns>
        </member>
        <member name="M:Mecalux.Core.Reflection.IObjectInfo.GetConstructor(System.Type,System.Type[],System.Type[])">
            <summary>
             Obtiene un constructor de un tipo,segun los argumentos genericos y  los tipos de los parametros
            </summary>
            <param name="type">Tipo</param>
            <param name="genericTypes">Lista de argumentos genericos</param>
            <param name="args">parametros del constructor</param>
            <returns>Informacion del constructor</returns>
        </member>
        <member name="M:Mecalux.Core.Reflection.IObjectInfo.GetMethods(System.Type)">
            <summary>
            Obtiene la lista de metodos de un tipo 
            </summary>
            <param name="type">Tipo</param>
            <returns>Lista de metodos que contiene el tipo</returns>
        </member>
        <member name="M:Mecalux.Core.Reflection.IObjectInfo.GetMethod(System.Type,System.String)">
            <summary>
            Obtiene el metodo de un tipo, segun el nombre
            </summary>
            <param name="type">Tipo</param>
            <param name="name"></param>
            <returns>Informacion del metodo</returns>
        </member>
        <member name="M:Mecalux.Core.Reflection.IObjectInfo.GetProperties(System.Type)">
            <summary>
            Obtiene la lista de propiedades de un tipo 
            </summary>
            <param name="type">Tipo</param>
            <returns>Lista de propiedades que contiene el tipo</returns>
        </member>
        <member name="M:Mecalux.Core.Reflection.IObjectInfo.GetProperty(System.Type,System.String)">
            <summary>
            Obtiene la propiedad de un tipo, segun el nombre
            </summary>
            <param name="type">Tipo</param>
            <param name="name"></param>
            <returns>Inofrmacion de la propiedad</returns>
        </member>
        <member name="M:Mecalux.Core.Reflection.IObjectInfo.CreateInstance(System.Reflection.ConstructorInfo,System.Object[])">
            <summary>
            Crea una instancia de una tipo
            </summary>
            <param name="constructorInfo">Constructor</param>
            <param name="args">Parametros del constructor</param>
            <returns>Instancia</returns>
        </member>
        <member name="M:Mecalux.Core.Reflection.IObjectInfo.CreateInstance(System.Type,System.Object[])">
            <summary>
            Crea una instancia de una tipo
            </summary>
            <param name="type">Tipo</param>
            <param name="args">Parametros del constructor</param>
            <returns>Instancia</returns>
        </member>
        <member name="M:Mecalux.Core.Reflection.IObjectInfo.CreateInstance``1(System.Reflection.ConstructorInfo,System.Object[])">
            <summary>
            Crea una instancia de una tipo
            </summary>
            <typeparam name="T">Tipo</typeparam>
            <param name="constructorInfo">Constructor</param>
            <param name="args">Parametros del constructor</param>
            <returns>Instancia</returns>
        </member>
        <member name="M:Mecalux.Core.Reflection.IObjectInfo.CreateInstance``1(System.Object[])">
            <summary>
            Crea una instancia de una tipo
            </summary>
            <typeparam name="T">Tipo</typeparam>
            <param name="args">Parametros del constructor</param>
            <returns>Instancia</returns>
        </member>
        <member name="T:Mecalux.Core.Reflection.Extensions.MemberInfoExtensions">
            <summary>
            Extensiones de <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
        </member>
        <member name="M:Mecalux.Core.Reflection.Extensions.MemberInfoExtensions.GetSingleAttributeOrNull``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Obtiene un solo atributo para un miembro.
            </summary>
            <typeparam name="T">Tipo del atributo</typeparam>
            <param name="memberInfo">El miembro que será verificado para el atributo</param>
            <param name="inherit">Incluir atributos heredados</param>
            <returns>Devuelve el objeto de atributo si se encuentra. Devuelve null si no se encuentra.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="memberInfo"/> is <see langword="null" />.</exception>
            <exception cref="T:System.TypeLoadException">Un tipo de atributo personalizado no puede cargarse.</exception>
        </member>
        <member name="T:Mecalux.Core.Reflection.Extensions.TypeExtensions">
            <summary>
            Extensiones de <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Mecalux.Core.Reflection.Extensions.TypeExtensions.CreateInstance(System.Type)">
            <summary>
            Crear una instancia
            </summary>
            <param name="type">Tipo de la instancia</param>
            <returns>Instancia</returns>
        </member>
        <member name="M:Mecalux.Core.Reflection.Extensions.TypeExtensions.CreateInstance(System.Type,System.Object[])">
            <summary>
            Crear una instacia
            </summary>
            <param name="type">Tipo de la instancia</param>
            <param name="args">Parametros que se requieren en el constructor</param>
            <returns>Instancia</returns>
        </member>
        <member name="M:Mecalux.Core.Reflection.Extensions.TypeExtensions.CreateGenericType(System.Type,System.Type[])">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.Core.Reflection.IAssemblyFinder">
            <summary>
            Esta interfaz se utiliza para obtener todos los conjuntos de clases que se deben investigar
            </summary>
        </member>
        <member name="M:Mecalux.Core.Reflection.IAssemblyFinder.GetAllAssemblies">
            <summary>
            Este método debe devolver todos los ensamblados utilizados por la aplicación.
            </summary>
            <returns>Lista de ensamblados</returns>
        </member>
        <member name="M:Mecalux.Core.Reflection.IAssemblyFinder.GetAssembly(System.String)">
            <summary>
            Este método debe devolver elensamblado segun su nombre.
            </summary>
            <param name="name">nombre del ensamblado que se desea buscar</param>
            <returns>Ensamblado</returns>
        </member>
        <member name="M:Mecalux.Core.Reflection.IAssemblyFinder.GetAllAssemblies(System.Func{System.Reflection.Assembly,System.Boolean})">
            <summary>
            Este método debe devolver todos los ensamblados que cumplan con el predicado
            </summary>
            <param name="predicate">Filtro</param>
            <returns>Ensamblados</returns>
        </member>
        <member name="T:Mecalux.Core.Reflection.IAttributeFinder">
            <summary>
            Buscador de atributos
            </summary>
        </member>
        <member name="M:Mecalux.Core.Reflection.IAttributeFinder.GetAttributeOrNull``1(System.Reflection.MemberInfo)">
            <summary>
            Busca atributos en el metodo
            </summary>
            <typeparam name="T">Tipo del atributo que se desea buscar</typeparam>
            <param name="methodInfo">Metodo donde se realizara la busqueda</param>
            <returns>Atributo o null(en caso de no existir)</returns>
        </member>
        <member name="M:Mecalux.Core.Reflection.IAttributeFinder.GetAttributeOrNull``1(System.Type)">
            <summary>
            busca atributos en los tipos
            </summary>
            <typeparam name="T">Tipo del atributo que se desea buscar</typeparam>
            <param name="type">Tipo donde se realizara la busqueda</param>
            <returns>Atributo o null(en caso de no existir)</returns>
        </member>
        <member name="M:Mecalux.Core.Reflection.IAttributeFinder.GetAttributeOrNull``1(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Busca atributos en el metodo y el tipo
            </summary>
            <typeparam name="T">Tipo del atributo que se desea buscar</typeparam>
            <param name="type">Tipo donde se realizara la busqueda</param>
            <param name="methodInfo">Metodo donde se realizara la busqueda</param>
            <returns>Atributo o null(en caso de no existir)</returns>
        </member>
        <member name="T:Mecalux.Core.Reflection.ITypeFinder">
            <summary>
            Contrato base que contiene las funcionalidades para la busqueda Type
            </summary>
        </member>
        <member name="M:Mecalux.Core.Reflection.ITypeFinder.Find(System.Func{System.Type,System.Boolean})">
            <summary>
            Buscar tipos segun el predicado
            </summary>
            <param name="predicate">Filtro de busqueda</param>
            <returns>Lista de Tipos</returns>
        </member>
        <member name="M:Mecalux.Core.Reflection.ITypeFinder.FindAll">
            <summary>
            Buscar todos los tipos 
            </summary>
            <returns>Lista de Tipos</returns>
        </member>
        <member name="M:Mecalux.Core.Reflection.ITypeFinder.FindAll(System.String,System.Func{System.Type,System.Boolean})">
            <summary>
            Buscar todos los tipos 
            </summary>
            <param name="assemblyName">Nombre del ensamblado</param>
            <param name="predicate">Filtro de busqueda</param>
            <returns>Lista de Tipos</returns>
        </member>
        <member name="T:Mecalux.Core.Reflection.ReflectionHelper">
            <summary>
            Define métodos de ayuda para la reflexión.
            </summary>
        </member>
        <member name="M:Mecalux.Core.Reflection.ReflectionHelper.IsAssignableToGenericType(System.Type,System.Type)">
            <summary>
            Comprueba si <paramref name="givenType"/> implemantaciones/herencias <paramref name="genericType"/>.
            </summary>
            <param name="givenType">Tipo para chequear </param>
            <param name="genericType">Tipo generico</param>
            <exception cref="T:System.Reflection.TargetInvocationException">Se llama a un inicializador estático y este produce una excepción.</exception>
        </member>
        <member name="M:Mecalux.Core.Reflection.ReflectionHelper.GetAttributesOfMemberAndDeclaringType``1(System.Reflection.MemberInfo)">
            <summary>
            Obtiene una lista de atributos definidos para un miembro de la clase y es el tipo declarar incluidos los atributos heredados.
            </summary>
            <typeparam name="TAttribute">Tipo del atributo</typeparam>
            <param name="memberInfo">MemberInfo</param>
        </member>
        <member name="M:Mecalux.Core.Reflection.TypeFinder.#ctor(Mecalux.Core.Reflection.IAssemblyFinder)">
            <exception cref="T:System.ArgumentNullException"><paramref name="assemblyFinder"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:Mecalux.Core.Reflection.TypeFinder.FindAll(System.String,System.Func{System.Type,System.Boolean})">
            <exception cref="T:System.Reflection.ReflectionTypeLoadException">El ensamblado contiene uno o varios tipos que no se pueden cargar. La matriz devuelta por la propiedad <see cref="P:System.Reflection.ReflectionTypeLoadException.Types" /> de esta excepción contiene un objeto <see cref="T:System.Type" /> para cada uno de los tipos que se ha cargado y null para cada uno de los tipos que no se pudo cargar, mientras que la propiedad <see cref="P:System.Reflection.ReflectionTypeLoadException.LoaderExceptions" /> contiene una excepción para cada uno de los tipos que no se pudo cargar.</exception>
        </member>
        <member name="T:Mecalux.Core.Resource.BaseResourceProvider`2">
            <summary>
            Proveedor de recursos base
            </summary>
            <typeparam name="TEntry">Tipo de contenedor de recursos</typeparam>
            <typeparam name="TMessage">Tipo de contenedor de mensajes</typeparam>
        </member>
        <member name="F:Mecalux.Core.Resource.BaseResourceProvider`2.CacheConfiguration">
            <summary>
            Configuracion del cache
            </summary>
        </member>
        <member name="M:Mecalux.Core.Resource.BaseResourceProvider`2.#ctor(Mecalux.Core.Caching.ICacheConfiguration)">
            <summary>
            Constructor
            </summary>
            <param name="cacheConfiguration"></param>
        </member>
        <member name="M:Mecalux.Core.Resource.BaseResourceProvider`2.GetEntries(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Resource.BaseResourceProvider`2.GetEntry(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Resource.BaseResourceProvider`2.CreateEntryContainer">
            <summary>
            Crear una instancia de tipo contenedor de recursos
            </summary>
            <returns>Instancia</returns>
        </member>
        <member name="M:Mecalux.Core.Resource.BaseResourceProvider`2.CreateMessageContainer">
            <summary>
            Crear una instancia de tipo contenedor de mensajes
            </summary>
            <returns>Instancia</returns>
        </member>
        <member name="T:Mecalux.Core.Resource.Container">
            <summary>
            Contenedor de recursos
            </summary>
        </member>
        <member name="F:Mecalux.Core.Resource.Container.DefaultCulture">
            <summary>
            Cultura por defecto
            </summary>
        </member>
        <member name="F:Mecalux.Core.Resource.Container.CacheConfiguration">
            <summary>
            Configuracion del cache, donde se almacenaran los recursos
            </summary>
        </member>
        <member name="M:Mecalux.Core.Resource.Container.#ctor(Mecalux.Core.Caching.ICacheConfiguration)">
            <exception cref="T:System.ArgumentNullException"><paramref name="cacheConfiguration"/> is <see langword="null" />.</exception>
        </member>
        <member name="P:Mecalux.Core.Resource.Container.Values">
            <summary>
            Valores del recurso
            </summary>
        </member>
        <member name="P:Mecalux.Core.Resource.Container.Culture">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Resource.Container.GetValue(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Mecalux.Core.Resource.Container.Keys">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Resource.Container.Load">
            <inheritdoc />
        </member>
        <member name="T:Mecalux.Core.Resource.EntryContainer">
            <summary>
            Recurso 
            </summary>
        </member>
        <member name="M:Mecalux.Core.Resource.EntryContainer.#ctor(Mecalux.Core.Caching.ICacheConfiguration)">
            <inheritdoc />
        </member>
        <member name="P:Mecalux.Core.Resource.EntryContainer.Name">
            <summary>
            Nombre del recurso
            </summary>
        </member>
        <member name="M:Mecalux.Core.Resource.EntryContainer.Load">
            <summary>
            carga el container
            </summary>
        </member>
        <member name="M:Mecalux.Core.Resource.EntryContainer.Read(System.String,System.String)">
            <summary>
            Carga del origen de datos un recurso y cultura en especifico
            </summary>
            <param name="culture">Cultura</param>
            <param name="name">Nombre del recurso</param>
            <returns>Lista de valores</returns>
        </member>
        <member name="T:Mecalux.Core.Resource.IContainer">
            <summary>
            Metodos de un contenedor de recursos
            </summary>
        </member>
        <member name="P:Mecalux.Core.Resource.IContainer.Culture">
            <summary>
            Cultura del recurso
            </summary>
        </member>
        <member name="M:Mecalux.Core.Resource.IContainer.GetValue(System.String)">
            <summary>
            Busca un valor en el recurso
            </summary>
            <param name="code">Codigo del elemento que se desea buscar en el recurso</param>
            <returns>Valor del recurso</returns>
        </member>
        <member name="P:Mecalux.Core.Resource.IContainer.Keys">
            <summary>
            Keys
            </summary>
        </member>
        <member name="M:Mecalux.Core.Resource.IContainer.Load">
            <summary>
            Carga los valores del recurso desde cache, en caso de no existir el cache consulta en el origen de datos
            </summary>
        </member>
        <member name="T:Mecalux.Core.Resource.IResourceProvider">
            <summary>
            Interfaz que debe ser implementado por los proveedores de recursos
            </summary>
        </member>
        <member name="M:Mecalux.Core.Resource.IResourceProvider.GetEntries(System.String,System.String)">
            <summary>
            Busca todos los valores del recurso para una cultura
            </summary>
            <param name="culture">Cultura</param>
            <param name="name">Nombre del recurso</param>
            <returns>Todos los valores del recurso</returns>
        </member>
        <member name="M:Mecalux.Core.Resource.IResourceProvider.GetEntry(System.String,System.String,System.String)">
            <summary>
            Busca un recurso
            </summary>
            <param name="culture">Cultura</param>
            <param name="name">Nombre del recurso</param>
            <param name="key">Key del recurso</param>
            <returns>Valor del recurso</returns>
        </member>
        <member name="M:Mecalux.Core.Resource.IResourceProvider.GetMessage(System.String,System.String)">
            <summary>
            Busca un mensaje
            </summary>
            <param name="culture">Cultura</param>
            <param name="code">Codigo</param>
            <returns>Valor del mensaje</returns>
        </member>
        <member name="T:Mecalux.Core.Resource.MessageContainer">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Resource.MessageContainer.#ctor(Mecalux.Core.Caching.ICacheConfiguration)">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Resource.MessageContainer.Load">
            <summary>
            Carga de los mesajes
            </summary>
        </member>
        <member name="M:Mecalux.Core.Resource.MessageContainer.Read(System.String)">
            <summary>
            Carga del origen de datos un recurso y cultura en especifico
            </summary>
            <param name="culture">Cultura</param>
            <returns>Lista de valores</returns>
        </member>
        <member name="T:Mecalux.Core.Resource.ResourceFactory">
            <summary>
            The resource factory.
            </summary>
        </member>
        <member name="F:Mecalux.Core.Resource.ResourceFactory._currentResourceFactory">
            <summary>
            The _current resource factory.
            </summary>
        </member>
        <member name="M:Mecalux.Core.Resource.ResourceFactory.SetCurrent(Mecalux.Core.Resource.IResourcerFactory)">
            <summary>
            The set current.
            </summary>
            <param name="resourceFactory">
            The resource factory.
            </param>
        </member>
        <member name="M:Mecalux.Core.Resource.ResourceFactory.CreateResource">
            <summary>
            The create resource.
            </summary>
            <returns>
            The <see cref="T:Mecalux.Core.Resource.IResourceProvider"/>.
            </returns>
        </member>
        <member name="T:Mecalux.Core.Serialization.Exceptions.SerializerNotImplementedException">
            <summary>
            The serializer not implemented exception.
            </summary>
        </member>
        <member name="M:Mecalux.Core.Serialization.Exceptions.SerializerNotImplementedException.#ctor(Mecalux.Core.Serialization.SerializationFormat)">
            <summary>
            The serializer not implemented exception.
            </summary>
            <param name="format">
            The format.
            </param>
            <exception cref="T:System.FormatException">
            El elemento de formato de <paramref name="format"/> no es válido. O bien  El índice de un elemento de formato no es cero.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="format"/> es null.
            </exception>
        </member>
        <member name="T:Mecalux.Core.Serialization.ISerializer">
            <summary>
            Contrato base que contiene los metodos que sera utilizado para el proceso de serializacion y deserializacion
            </summary>
        </member>
        <member name="P:Mecalux.Core.Serialization.ISerializer.Format">
            <summary>
            Formato de la serialización
            </summary>
            <value>
            Formato de la serialización
            </value>
        </member>
        <member name="M:Mecalux.Core.Serialization.ISerializer.Deserialize(System.Type,System.String)">
            <summary>
            Deserializar
            </summary>
            <param name="type">Tipo del objeto que se desea deserializar</param>
            <param name="serializedValue">Valor que se desea deserializar</param>
            <returns>Objeto deserializado</returns>
        </member>
        <member name="M:Mecalux.Core.Serialization.ISerializer.Deserialize``1(System.String)">
            <summary>
            Deserializar
            </summary>
            <typeparam name="T">Tipo del objeto que se desea deserializar</typeparam>
            <param name="serializedValue">Valor que se desea deserializar</param>
            <returns>Objeto deserializado(<typeparamref name="T"/>)</returns>
        </member>
        <member name="M:Mecalux.Core.Serialization.ISerializer.Serialize``1(``0)">
            <summary>
            Serializar
            </summary>
            <typeparam name="T">Tipo del objeto que se desea serializar</typeparam>
            <param name="value">Objeto que se desea serializar</param>
            <returns>Valor de la serializacion</returns>
        </member>
        <member name="M:Mecalux.Core.Serialization.ISerializer.Serialize(System.Object)">
            <summary>
            Serializar
            </summary>
            <param name="value">Objeto que se desea serializar</param>
            <returns>Valor de la serializacion</returns>
        </member>
        <member name="T:Mecalux.Core.Serialization.ISerializerFactory">
            <summary>
            Contrato de Base para la fábrica de serealizadores
            </summary>
        </member>
        <member name="M:Mecalux.Core.Serialization.ISerializerFactory.GetCurrent(Mecalux.Core.Serialization.SerializationFormat)">
            <summary>
            Retorna un objeto que podra serializar y deserializar el formato solicitado
            </summary>
            <param name="format">Formato de serializacion</param>
            <returns>Objecto que serializa y deserializa el formato deseado</returns>
        </member>
        <member name="P:Mecalux.Core.Serialization.ISerializerFactory.Json">
            <summary>
            Serializacion y Deserializacion en JSON
            </summary>
            <value>
            Serizalizador en Json
            </value>
        </member>
        <member name="P:Mecalux.Core.Serialization.ISerializerFactory.Xml">
            <summary>
            Serializacion y Deserializacion en XML
            </summary>
            <value>
            Serizalizador en XML
            </value>
        </member>
        <member name="P:Mecalux.Core.Serialization.ISerializerFactory.Binary">
            <summary>
            Serializacion y Deserializacion en binario
            </summary>
            <value>
            Serizalizador en Binario
            </value>
        </member>
        <member name="T:Mecalux.Core.Serialization.IXmlSerializer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mecalux.Core.Serialization.IXmlSerializer.ToXElement``1(``0)">
            <summary>
            Convierte un objeto del tipo <typeparam name = "T" /> en un XElement.
            </summary>
            <typeparam name="T">Tipo del objeto</typeparam>
            <param name="input">entrada</param>
            <returns>Devuelve el objeto como su representación XML en un XElement.</returns>
        </member>
        <member name="M:Mecalux.Core.Serialization.IXmlSerializer.ToXElement``1(``0,System.String)">
            <summary>
            Convierte un objeto del tipo <typeparam name = "T" /> en un XElement.
            </summary>
            <typeparam name="T">Tipo del objeto</typeparam>
            <param name="input">entrada</param>
            <param name="element">nombre del elemento</param>
            <returns>Devuelve el objeto como su representación XML en un XElement.</returns>
        </member>
        <member name="M:Mecalux.Core.Serialization.IXmlSerializer.ToXml``1(``0,System.IO.Stream)">
            <summary>
            Genera una representación XML de un objeto de tipo <typeparam name = "T" /> y vuelve a <see cref = "T:System.IO.Stream" /> que contiene el resultado.
            </summary>
            <typeparam name="T">Tipo del objeto</typeparam>
            <param name="input">entrada</param>
            <param name="stream"><see cref="T:System.IO.Stream"/> utilizado para escribir el documento XML.</param>
            <returns><see cref="T:System.IO.Stream"/> Con el XML resultante.</returns>
        </member>
        <member name="M:Mecalux.Core.Serialization.IXmlSerializer.ToXml``1(``0,System.IO.Stream,System.String)">
            <summary>
            Genera una representación XML de un objeto de tipo <typeparam name = "T" /> y vuelve a <see cref = "T:System.IO.Stream" /> que contiene el resultado.
            </summary>
            <typeparam name="T">Tipo del objeto</typeparam>
            <param name="input">entrada</param>
            <param name="stream"><see cref="T:System.IO.Stream"/> utilizado para escribir el documento XML.</param>
            <param name="element">El nombre del elemento raíz.</param>
            <returns><see cref="T:System.IO.Stream"/> Con el XML resultante.</returns>
        </member>
        <member name="T:Mecalux.Core.Serialization.SerializationFormat">
            <summary>
            Formatos validos para la serializacion y deserializacion
            </summary>
        </member>
        <member name="F:Mecalux.Core.Serialization.SerializationFormat.None">
            <summary>
            Formato no definito
            </summary>
        </member>
        <member name="F:Mecalux.Core.Serialization.SerializationFormat.Json">
            <summary>
            JSON 
             </summary>
        </member>
        <member name="F:Mecalux.Core.Serialization.SerializationFormat.Xml">
            <summary>
            XML  
            </summary>
        </member>
        <member name="F:Mecalux.Core.Serialization.SerializationFormat.Binary">
            <summary>
            Binary 
            </summary>
        </member>
        <member name="M:Mecalux.Core.Serialization.SerializerFactory.#ctor(Mecalux.Core.IoC.IIocManager)">
            <summary>
            The serializer factory.
            </summary>
            <param name="iocManager">
            IocManager que se desea utilizar para buscar los servicios que implementen la interfaz ISerializer
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="iocManager"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Mecalux.Core.Serialization.Serializers.BinarySerializer.Deserialize``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Serialization.Serializers.BinarySerializer.Serialize``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Serialization.Serializers.BinarySerializer.Deserialize(System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Serialization.Serializers.BinarySerializer.Serialize(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Mecalux.Core.Serialization.Serializers.CustomXmlSerializer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mecalux.Core.Serialization.Serializers.CustomXmlSerializer.ToXElement``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Serialization.Serializers.CustomXmlSerializer.ToXElement``1(``0,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Serialization.Serializers.CustomXmlSerializer.ToXml``1(``0,System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Serialization.Serializers.CustomXmlSerializer.ToXml``1(``0,System.IO.Stream,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Serialization.Serializers.JsonSerializer.Deserialize``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Serialization.Serializers.JsonSerializer.Serialize``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Serialization.Serializers.JsonSerializer.Deserialize(System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Serialization.Serializers.JsonSerializer.Serialize(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Serialization.Serializers.XmlSerializer.Deserialize``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Serialization.Serializers.XmlSerializer.Serialize``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Serialization.Serializers.XmlSerializer.Deserialize(System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Mecalux.Core.Serialization.Serializers.XmlSerializer.Serialize(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Mecalux.Core.Trace.ITraceMonitor">
            <summary>
            Interfaz del TraceMonitor
            </summary>
        </member>
        <member name="M:Mecalux.Core.Trace.ITraceMonitor.Init(System.String)">
            <summary>
            Inicializa una traza con el ID recibido
            </summary>
            <param name="ID"></param>
        </member>
        <member name="M:Mecalux.Core.Trace.ITraceMonitor.Clear(System.String)">
            <summary>
            Limpia las trazas para el ID recibido
            </summary>
            <param name="ID"></param>
        </member>
        <member name="M:Mecalux.Core.Trace.ITraceMonitor.GetTrace(System.String,System.String)">
            <summary>
            Obtiene la trazaconcreta para el ID y el name recibido
            </summary>
            <param name="ID"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Mecalux.Core.Trace.ITraceMonitor.StartTraceStep(System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Inicializamos seguimiento indicando el nombre de la seccion
            </summary>
            <param name="ID">Idenctificador de seccion de traza generado en el Init</param>
            <param name="stepName">Nombre fijo que se va a dar a la traza si se desea</param>
            <param name="key">Clave que sera usada para concatener al principio del identificador de la traza. Valido para cuando se esta en un bucle y se quiere trazar cada ejecucion pasando el nº de iteracion.</param>
            <param name="memberName">Nombre de la funcion desde la que se llama a esta. Es automatico mediante System.Runtime.CompilerServices.CallerMemberName  <see cref="N:System.Runtime.CompilerServices"/> "/></param>
            <param name="sourceFilePath">Nombre del fichero desde el que se llama a esta. Es automatico mediante System.Runtime.CompilerServices.CallerFilePath <see cref="N:System.Runtime.CompilerServices"/></param>
            <param name="sourceLineNumber">Nº de linea de la funcion desde la que se llama a esta. Es automatico mediante System.Runtime.CompilerServices.CallerLineNumber <see cref="N:System.Runtime.CompilerServices"/> </param>
            <remarks> Los constructores seran devueltos como .ctor 
            Ver https://msdn.microsoft.com/en-us/library/hh534540(v=vs.110).aspx#MEMBERNAMES </remarks>
            <returns>Devuelve el nombre que se ha generado para la traza que se puede pasar posteriormente a StopStep</returns>
        </member>
        <member name="M:Mecalux.Core.Trace.ITraceMonitor.StopTraceStep(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Finalizamos el seguimiento de la seccion actual, indicando el los datos y comentarios si los hubiera
            </summary>
            <param name="ID">Idenctificador de seccion de traza generado en el Init</param>
            <param name="stepName">Nombre fijo que se va a dar a la traza si se desea</param>
            <param name="key">Clave que sera usada para concatener al principio del identificador de la traza. Valido para cuando se esta en un bucle y se quiere trazar cada ejecucion pasando el nº de iteracion.</param>
            <param name="data">SQL de la secciona actual si lo hubiera</param>
            <param name="comments">Comentarios particulares de esta traza si los hubiera</param>
            <param name="memberName">Nombre de la funcion desde la que se llama a esta. Es automatico mediante System.Runtime.CompilerServices.CallerMemberName  <see cref="N:System.Runtime.CompilerServices"/> "/></param>
            <param name="sourceFilePath">Nombre del fichero desde el que se llama a esta. Es automatico mediante System.Runtime.CompilerServices.CallerFilePath <see cref="N:System.Runtime.CompilerServices"/></param>
            <param name="sourceLineNumber">Nº de linea de la funcion desde la que se llama a esta. Es automatico mediante System.Runtime.CompilerServices.CallerLineNumber <see cref="N:System.Runtime.CompilerServices"/> </param>
            <remarks> Los constructores seran devueltos como .ctor 
            Ver https://msdn.microsoft.com/en-us/library/hh534540(v=vs.110).aspx#MEMBERNAMES </remarks>
        </member>
        <member name="M:Mecalux.Core.Trace.ITraceMonitor.ToString">
            <summary>
            Sobrecarga de ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mecalux.Core.Trace.ITraceMonitorFactory">
            <summary>
            Factory del TraceMonitorFactory, que recibe un IOC y devuelve la instancia inicializada con el debug activado o no
            </summary>
        </member>
        <member name="M:Mecalux.Core.Trace.ITraceMonitorFactory.GetCurrent(System.Boolean,System.String)">
            <summary>
            Devuelve la instancia del TraceMonitor del IOC, inicializada al ID recibido, dependiendo de si la configuracion esta activada o no
            </summary>
            <param name="bActivated">Indica si esta activada la traza</param>
            <param name="ID">Identificador unico para la serie de trazas. Sera necesario para dejar las siguientes trazas. La responsabilidad de persistir este ID es del que lo está usando</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.Core.Trace.TraceDebugStep">
            <summary>
            Paso de la traza de depuracion
            </summary>
        </member>
        <member name="P:Mecalux.Core.Trace.TraceDebugStep.dateTimeElapsed">
            <summary>
            Tiempo transcurrido
            </summary>
        </member>
        <member name="P:Mecalux.Core.Trace.TraceDebugStep.name">
            <summary>
            Nombre
            </summary>
        </member>
        <member name="P:Mecalux.Core.Trace.TraceDebugStep.data">
            <summary>
            Datos
            </summary>
        </member>
        <member name="P:Mecalux.Core.Trace.TraceDebugStep.ejecTime">
            <summary>
            Tiempo de ejecucion
            </summary>
        </member>
        <member name="P:Mecalux.Core.Trace.TraceDebugStep.comments">
            <summary>
            Comentarios
            </summary>
        </member>
        <member name="P:Mecalux.Core.Trace.TraceDebugStep.lineNumber">
            <summary>
            Numero de linea
            </summary>
        </member>
        <member name="P:Mecalux.Core.Trace.TraceDebugStep.traceTime">
            <summary>
            Instante de inicio de la traza en UTC
            </summary>
        </member>
        <member name="T:Mecalux.Core.Trace.DateTimeElapsed">
            <summary>
            Permite medir el tiempo transcurrido tanto desde el inicio como desde la anterior marca
            </summary>
        </member>
        <member name="P:Mecalux.Core.Trace.DateTimeElapsed.dtIniAbs">
            <summary>
            Inicio absoluto del contador
            </summary>
        </member>
        <member name="P:Mecalux.Core.Trace.DateTimeElapsed.dtIniAnt">
            <summary>
            Inicio de la marca anterior
            </summary>
        </member>
        <member name="P:Mecalux.Core.Trace.DateTimeElapsed.dtFin">
            <summary>
            Fin de marca
            </summary>
        </member>
        <member name="P:Mecalux.Core.Trace.DateTimeElapsed.tsTiempoTranscurrido">
            <summary>
            Tiempo transcurrido
            </summary>
        </member>
        <member name="M:Mecalux.Core.Trace.DateTimeElapsed.#ctor(System.Boolean)">
            <summary>
            Contructor
            </summary>
            <param name="isStarted">Indica si se inicializa comenzando la medicion de tiempo</param>
        </member>
        <member name="M:Mecalux.Core.Trace.DateTimeElapsed.Init">
            <summary>
            Inicializa el seguimiento de tiempo, inicializando en inicio de tiempo absoluto y el anterior a ahora 
            </summary>
        </member>
        <member name="M:Mecalux.Core.Trace.DateTimeElapsed.GetElapsedStep">
            <summary>
            Obtiene el tiempo transcurrido desde la ultima parada
            </summary>
            <returns>TimeSpan con el tiempo transcurrido desde la ultima parada</returns>
        </member>
        <member name="T:Mecalux.Core.Trace.TraceMonitor">
            <summary>
            Clase para la traza de datos.Para dejar trazas en iteraciones o recursividades, se debe usar siempre el nombre de la traza devuelto por la funcion InitStep para el StopStep. Para realizar trazas que se paren fuera de la funcion que  las inicio, habra que proporcionar el nombre al la traza en el InitStep
            </summary>
        </member>
        <member name="F:Mecalux.Core.Trace.TraceMonitor._dicTraces">
            <summary>
            Lista de trazas que se van acumulando por cada identificador
            </summary>
        </member>
        <member name="M:Mecalux.Core.Trace.TraceMonitor.#ctor">
            <summary>
            Constructor. Si el debug no esta activado no instancia las trazas ni el medido de tiempos
            </summary>
        </member>
        <member name="M:Mecalux.Core.Trace.TraceMonitor.Init(System.String)">
            <summary>
            Establece la activacion del debug al para la clave recibido si este no es vacio
            </summary>
            <param name="id">Identificador de las traza</param>
        </member>
        <member name="M:Mecalux.Core.Trace.TraceMonitor.Clear(System.String)">
            <summary>
            Limpia las trazas acumuladas para la clave recibida. No devuelve IndexOutOfRangeException como seria de esperar para evitar errores si se dessctiva
            </summary>
            <param name="id">Identificador de las traza</param>
        </member>
        <member name="M:Mecalux.Core.Trace.TraceMonitor.getListOfTracesByID(System.String)">
            <summary>
            Devuelve la lista de trazas para el ID recibido y reservado previamente. . No devuelve IndexOutOfRangeException como seria de esperar para evitar errores si se dessctiva
            </summary>
            <param name="id">Identificador de las traza</param>
            <returns>Lista de trazad para el identificar dado</returns>
        </member>
        <member name="M:Mecalux.Core.Trace.TraceMonitor.GetTrace(System.String,System.String)">
            <summary>
            Devuelve la traza de nombre solicitado
            </summary>
        </member>
        <member name="M:Mecalux.Core.Trace.TraceMonitor.StartTraceStep(System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Inicializamos seguimiento indicando el nombre de la seccion
            </summary>
            <param name="id">Idenctificador de seccion de traza generado en el Init</param>
            <param name="stepName">Nombre fijo que se va a dar a la traza si se desea</param>
            <param name="key">Clave que sera usada para concatener al principio del identificador de la traza. Valido para cuando se esta en un bucle y se quiere trazar cada ejecucion pasando el nº de iteracion.</param>
            <param name="memberName">Nombre de la funcion desde la que se llama a esta. Es automatico mediante System.Runtime.CompilerServices.CallerMemberName  <see cref="N:System.Runtime.CompilerServices"/> "/></param>
            <param name="sourceFilePath">Nombre del fichero desde el que se llama a esta. Es automatico mediante System.Runtime.CompilerServices.CallerFilePath <see cref="N:System.Runtime.CompilerServices"/></param>
            <param name="sourceLineNumber">Nº de linea de la funcion desde la que se llama a esta. Es automatico mediante System.Runtime.CompilerServices.CallerLineNumber <see cref="N:System.Runtime.CompilerServices"/> </param>
            <remarks> Los constructores seran devueltos como .ctor 
            Ver https://msdn.microsoft.com/en-us/library/hh534540(v=vs.110).aspx#MEMBERNAMES </remarks>
            <returns>Devuelve el nombre que se ha generado para la traza que se puede pasar posteriormente a StopStep</returns>
        </member>
        <member name="M:Mecalux.Core.Trace.TraceMonitor.StopTraceStep(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Finalizamos el seguimiento de la seccion actual, indicando el los datos y comentarios si los hubiera
            </summary>
            <param name="id">Idenctificador de seccion de traza generado en el Init</param>
            <param name="stepName">Nombre fijo que se va a dar a la traza si se desea</param>
            <param name="key">Clave que sera usada para concatener al principio del identificador de la traza. Valido para cuando se esta en un bucle y se quiere trazar cada ejecucion pasando el nº de iteracion.</param>
            <param name="data">SQL de la secciona actual si lo hubiera</param>
            <param name="comments">Comentarios particulares de esta traza si los hubiera</param>
            <param name="memberName">Nombre de la funcion desde la que se llama a esta. Es automatico mediante System.Runtime.CompilerServices.CallerMemberName  <see cref="N:System.Runtime.CompilerServices"/> "/></param>
            <param name="sourceFilePath">Nombre del fichero desde el que se llama a esta. Es automatico mediante System.Runtime.CompilerServices.CallerFilePath <see cref="N:System.Runtime.CompilerServices"/></param>
            <param name="sourceLineNumber">Nº de linea de la funcion desde la que se llama a esta. Es automatico mediante System.Runtime.CompilerServices.CallerLineNumber <see cref="N:System.Runtime.CompilerServices"/> </param>
            <remarks> Los constructores seran devueltos como .ctor 
            Ver https://msdn.microsoft.com/en-us/library/hh534540(v=vs.110).aspx#MEMBERNAMES </remarks>
        </member>
        <member name="M:Mecalux.Core.Trace.TraceMonitor.GetFileName(System.String)">
            <summary>
            Devuelve el  nombre del paso del la traza a partir del nombre del fichero y el de la funcion
            </summary>
            <param name="sourceFilePaths">Ruta completa del fichero</param>
            <returns>El nombre del fichero de la ruta</returns>
        </member>
        <member name="M:Mecalux.Core.Trace.TraceMonitor.GetStepName(System.String,System.String,System.String)">
            <summary>
            Obtiene el nombre del paso de la traza a partir del nombre del fichero de la ruta "sourceFilePaths" y del nombre del metodo "memberName"
            </summary>
            <param name="key">Key que se añade a el nombre de la clave de la traza</param>
            <param name="sourceFilePaths">Ruta completa del fichero</param>
            <param name="memberName">Nombred el metodo</param>
            <returns>El nombre del paso de la traza</returns>
        </member>
        <member name="M:Mecalux.Core.Trace.TraceMonitor.ToString">
             <summary>
             Devuelve todas las trazas en un solo string
             </summary>
             <example>
             Method: DataAccessDbConection.cs..ctor - Line 21 - Time: 274 MS - Comments:  - Data:  
             Method: DataAccess.cs.OpenConnection - Line 74 - Time: 1239 MS - Comments:  - Data:  
             </example>
            <returns>Un string con las tarzas</returns>
        </member>
        <member name="T:Mecalux.Core.Trace.TraceMonitorFactory">
            <summary>
            Factory del TraceMonitor, que recibe un IOC y devuelve la instancia inicializada con el debug activado o no
            </summary>
        </member>
        <member name="M:Mecalux.Core.Trace.TraceMonitorFactory.#ctor(Mecalux.Core.IoC.IIocManager)">
            <summary>
            The montor factory.
            </summary>
            <param name="iocManager">
            IocManager que se desea utilizar para buscar los servicios que implementen la interfaz ITraceMonitor
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="iocManager"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Mecalux.Core.Trace.TraceMonitorFactory.GetCurrent(System.Boolean,System.String)">
            <summary>
            Devuelve la instancia del TraceMonitor del IOC, inicializada al ID recibido, dependiendo de si la configuracion esta activada o no
            </summary>
            <param name="activated">Indica si esta activada la traza</param>
            <param name="id">Identificador unico para la serie de trazas. Sera necesario para dejar las siguientes trazas. La responsabilidad de persistir este ID es del que lo está usando</param>
            <returns></returns>
        </member>
        <member name="T:Mecalux.Core.Translations.ConfigTranslations">
            <summary>
            Representa una configuración para traducciones
            </summary>
        </member>
        <member name="M:Mecalux.Core.Translations.ConfigTranslations.#ctor(Mecalux.Core.Translations.LanguageContext)">
            <summary>
            Ctor.
            </summary>
            <param name="languageContext">Contexto del idioma</param>
        </member>
        <member name="M:Mecalux.Core.Translations.ConfigTranslations.AddEntity(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Añade un tipo de elemento traducible
            </summary>
            <param name="domainType">Tipo de elemento traducible</param>
            <param name="languageProperty">Propiedad que contiene el tipo de elemento traducible</param>
        </member>
        <member name="M:Mecalux.Core.Translations.ConfigTranslations.GetProperties(System.Type)">
            <summary>
            Obtiene las propiedades que contienen un tipo dado
            </summary>
            <param name="type">Tipo de elemento traducible</param>
            <returns>Lista de propiedades</returns>
        </member>
        <member name="M:Mecalux.Core.Translations.ConfigTranslations.GetProperty(System.Type)">
            <summary>
            Obtiene la propiedad que contiene un tipo dado
            </summary>
            <param name="type">Tipo de elemento traducible</param>
            <returns>Propiedad</returns>
        </member>
        <member name="M:Mecalux.Core.Translations.ConfigTranslations.IsConfigType(System.Type)">
            <summary>
            Informa si el tipo indicado está registrado
            </summary>
            <param name="type">Tipo de elemento traducible</param>
            <returns>TRUE si el tipo está registrado. FALSE en caso contrario</returns>
        </member>
        <member name="T:Mecalux.Core.Translations.DefineEntityTranslateAttribute">
            <summary>
            Representa una propiedad para vincular una entidad de búsqueda a un elemento traducible
            </summary>
        </member>
        <member name="P:Mecalux.Core.Translations.DefineEntityTranslateAttribute.Type">
            <summary>
            Obtiene el tipo de la entidad de búsqueda
            </summary>
        </member>
        <member name="M:Mecalux.Core.Translations.DefineEntityTranslateAttribute.#ctor(System.Type)">
            <summary>
            Ctor.
            </summary>
            <param name="type">Tipo de la entidad de búsqueda</param>
        </member>
        <member name="T:Mecalux.Core.Translations.DefinePropertyTranslateAttribute">
            <summary>
            Representa una propiedad para identificar propiedades traducibles
            </summary>
        </member>
        <member name="P:Mecalux.Core.Translations.DefinePropertyTranslateAttribute.Name">
            <summary>
            Obtiene el nombre de la propiedad traducible
            </summary>
        </member>
        <member name="M:Mecalux.Core.Translations.DefinePropertyTranslateAttribute.#ctor(System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="name">Nombre de la propiedad traducible</param>
        </member>
        <member name="T:Mecalux.Core.Translations.ITranslateObject">
            <summary>
            Representa un elemento traducible
            </summary>
        </member>
        <member name="P:Mecalux.Core.Translations.ITranslateObject.IdObject">
            <summary>
            Obtiene o establece el identificador del elemento
            </summary>
        </member>
        <member name="P:Mecalux.Core.Translations.ITranslateObject.LanguageContext">
            <summary>
            Obtiene o establece el contexto del idioma
            </summary>
        </member>
        <member name="T:Mecalux.Core.Translations.LanguageContext">
            <summary>
            Representa un contexto de idioma
            </summary>
        </member>
        <member name="P:Mecalux.Core.Translations.LanguageContext.Id">
            <summary>
            Obtiene o establece el identificador del contexto
            </summary>
        </member>
        <member name="M:Mecalux.Core.Translations.LanguageContext.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:Mecalux.Core.Translations.LanguageContext.Executes``1(System.Collections.Generic.IEnumerable{Mecalux.Core.Domain.Entities.Entity{``0}})">
            <summary>
            Inicia la operación de traducción
            </summary>
            <typeparam name="TPrimaryKey">Tipo de objeto traducible</typeparam>
            <param name="data">Lista de consultas para la traducción de los objetos</param>
        </member>
        <member name="M:Mecalux.Core.Translations.LanguageContext.Execute``1(Mecalux.Core.Domain.Entities.Entity{``0})">
            <summary>
            Inicia la operación de traducción
            </summary>
            <typeparam name="TPrimaryKey">Tipo de objeto traducible</typeparam>
            <param name="data">Consulta para la traducción de los objetos</param>
        </member>
        <member name="M:Mecalux.Core.Translations.LanguageContext.InitializeObjectSet">
            <summary>
            Inicializa la lista de objetos traducibles que contenga el contexto
            </summary>
        </member>
        <member name="M:Mecalux.Core.Translations.LanguageContext.Translate``1(Mecalux.Core.Domain.Entities.Entity{``0})">
            <summary>
            Traduce los elementos indicados en la consulta
            </summary>
            <typeparam name="TPrimaryKey">Tipo de objeto traducible</typeparam>
            <param name="data">Consulta para la traducción de los objetos</param>
        </member>
        <member name="M:Mecalux.Core.Translations.LanguageContext.Translate``1(System.Collections.Generic.IEnumerable{Mecalux.Core.Domain.Entities.Entity{``0}},System.Collections.Generic.IEnumerable{Mecalux.Core.Translations.LanguageContext},System.String)">
            <summary>
            Traduce los elementos indicados en la consulta
            </summary>
            <typeparam name="TPrimaryKey">Tipo de objeto traducible</typeparam>
            <param name="data">Lista de consultas para la traducción de los objetos</param>
            <param name="languages">Contextos involucrados en la traducción</param>
            <param name="language">Idioma al que se quiere traducir</param>
        </member>
        <member name="M:Mecalux.Core.Translations.LanguageContext.Translate``1(Mecalux.Core.Domain.Entities.Entity{``0},System.Collections.Generic.IEnumerable{Mecalux.Core.Translations.LanguageContext},System.String)">
            <summary>
            Traduce los elementos indicados en la consulta
            </summary>
            <typeparam name="TPrimaryKey">Tipo de objeto traducible</typeparam>
            <param name="data">Consulta para la traducción de los objetos</param>
            <param name="languages">Contextos involucrados en la traducción</param>
            <param name="language">Idioma al que se quiere traducir</param>
        </member>
        <member name="T:Mecalux.Core.Translations.TranslateObjectSet`1">
            <summary>
            Representa una lista de objetos traducibles
            </summary>
            <typeparam name="TEntity">Tipo de objetos traducibles</typeparam>
        </member>
        <member name="M:Mecalux.Core.Translations.TranslateObjectSet`1.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
    </members>
</doc>
